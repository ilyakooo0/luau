if T == nil then
(Message or print)("\10\32\62\62\62\32\116\101\115\116\67\32\110\111\116\32\97\99\116\105\118\101\58\32\115\107\105\112\112\105\110\103\32\65\80\73\32\116\101\115\116\115\32\60\60\60\10")
return 
end
local debug = require("\100\101\98\117\103")
local pack = table.pack
local MEMERRMSG = "\110\111\116\32\101\110\111\117\103\104\32\109\101\109\111\114\121"
local function tcheck
(t1,t2)
assert(t1.n == (t2.n or # t2) + 1)
for i = 2, t1.n
do
assert(t1[i] == t2[i - 1])
end
end
local function checkerr
(msg,f, ...)
local stat,err = pcall(f,...)
assert(not stat and string.find(err,msg))
end
print("\116\101\115\116\105\110\103\32\67\32\65\80\73")
local a = T.testC("\112\117\115\104\118\97\108\117\101\32\82\59\32\114\101\116\117\114\110\32\49")
assert(a == debug.getregistry())
assert(T.testC("\115\101\116\116\111\112\32\49\48\59\32\97\98\115\105\110\100\101\120\32\45\49\59\32\114\101\116\117\114\110\32\49") == 10)
assert(T.testC("\115\101\116\116\111\112\32\53\59\32\97\98\115\105\110\100\101\120\32\45\53\59\32\114\101\116\117\114\110\32\49") == 1)
assert(T.testC("\115\101\116\116\111\112\32\49\48\59\32\97\98\115\105\110\100\101\120\32\49\59\32\114\101\116\117\114\110\32\49") == 1)
assert(T.testC("\115\101\116\116\111\112\32\49\48\59\32\97\98\115\105\110\100\101\120\32\82\59\32\114\101\116\117\114\110\32\49") < - 10)
a=T.d2s(12458954321123.0)
assert(a == string.pack("\100",12458954321123.0))
assert(T.s2d(a) == 12458954321123.0)
local a,b,c = T.testC("\112\117\115\104\110\117\109\32\49\59\32\112\117\115\104\110\117\109\32\50\59\32\112\117\115\104\110\117\109\32\51\59\32\114\101\116\117\114\110\32\50")
assert(a == 2 and b == 3 and not c)
local f = T.makeCfunc("\112\117\115\104\110\117\109\32\49\59\32\112\117\115\104\110\117\109\32\50\59\32\112\117\115\104\110\117\109\32\51\59\32\114\101\116\117\114\110\32\50")
a,b,c=f()
assert(a == 2 and b == 3 and not c)
a,b,c=T.testC("\112\117\115\104\98\111\111\108\32\49\59\32\112\117\115\104\98\111\111\108\32\50\59\32\112\117\115\104\98\111\111\108\32\48\59\32\114\101\116\117\114\110\32\51")
assert(a == b and a == true and c == false)
a,b,c=T.testC("\112\117\115\104\98\111\111\108\32\48\59\32\112\117\115\104\98\111\111\108\32\49\48\59\32\112\117\115\104\110\105\108\59\10\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\116\111\98\111\111\108\32\45\51\59\32\116\111\98\111\111\108\32\45\51\59\32\116\111\98\111\111\108\32\45\51\59\32\114\101\116\117\114\110\32\51")
assert(a == false and b == true and c == false)
a,b,c=T.testC("\103\101\116\116\111\112\59\32\114\101\116\117\114\110\32\50",10,20,30,40)
assert(a == 40 and b == 5 and not c)
local t = pack(T.testC("\115\101\116\116\111\112\32\53\59\32\114\101\116\117\114\110\32\42",2,3))
tcheck(t,{["\110"] = 4,2,3})
t=pack(T.testC("\115\101\116\116\111\112\32\48\59\32\115\101\116\116\111\112\32\49\53\59\32\114\101\116\117\114\110\32\49\48",3,1,23))
assert(t.n == 10 and t[1] == nil and t[10] == nil)
t=pack(T.testC("\114\101\109\111\118\101\32\45\50\59\32\114\101\116\117\114\110\32\42",2,3,4))
tcheck(t,{["\110"] = 2,2,4})
t=pack(T.testC("\105\110\115\101\114\116\32\45\49\59\32\114\101\116\117\114\110\32\42",2,3))
tcheck(t,{["\110"] = 2,2,3})
t=pack(T.testC("\105\110\115\101\114\116\32\51\59\32\114\101\116\117\114\110\32\42",2,3,4,5))
tcheck(t,{["\110"] = 4,2,5,3,4})
t=pack(T.testC("\114\101\112\108\97\99\101\32\50\59\32\114\101\116\117\114\110\32\42",2,3,4,5))
tcheck(t,{["\110"] = 3,5,3,4})
t=pack(T.testC("\114\101\112\108\97\99\101\32\45\50\59\32\114\101\116\117\114\110\32\42",2,3,4,5))
tcheck(t,{["\110"] = 3,2,3,5})
t=pack(T.testC("\114\101\109\111\118\101\32\51\59\32\114\101\116\117\114\110\32\42",2,3,4,5))
tcheck(t,{["\110"] = 3,2,4,5})
t=pack(T.testC("\99\111\112\121\32\51\32\52\59\32\114\101\116\117\114\110\32\42",2,3,4,5))
tcheck(t,{["\110"] = 4,2,3,3,5})
t=pack(T.testC("\99\111\112\121\32\45\51\32\45\49\59\32\114\101\116\117\114\110\32\42",2,3,4,5))
tcheck(t,{["\110"] = 4,2,3,4,3})
do
local t = {10,20,30,40,50,60}
for i = - 6, 6
do
local s = string.format("\114\111\116\97\116\101\32\50\32\37\100\59\32\114\101\116\117\114\110\32\55",i)
local t1 = pack(T.testC(s,10,20,30,40,50,60))
tcheck(t1,t)
table.insert(t,1,table.remove(t))
end
t=pack(T.testC("\114\111\116\97\116\101\32\45\50\32\49\59\32\114\101\116\117\114\110\32\42",10,20,30,40))
tcheck(t,{10,20,40,30})
t=pack(T.testC("\114\111\116\97\116\101\32\45\50\32\45\49\59\32\114\101\116\117\114\110\32\42",10,20,30,40))
tcheck(t,{10,20,40,30})
t=pack(T.testC("\114\111\116\97\116\101\32\45\49\32\48\59\32\114\101\116\117\114\110\32\42",10,20,30,40))
tcheck(t,{10,20,30,40})
t=pack(T.testC("\114\111\116\97\116\101\32\45\49\32\49\59\32\114\101\116\117\114\110\32\42",10,20,30,40))
tcheck(t,{10,20,30,40})
t=pack(T.testC("\114\111\116\97\116\101\32\53\32\45\49\59\32\114\101\116\117\114\110\32\42",10,20,30,40))
tcheck(t,{10,20,30,40})
end
T.testC("\32\32\119\97\114\110\105\110\103\67\32\34\35\84\104\105\115\32\115\104\111\108\100\32\98\101\32\97\34\10\32\32\119\97\114\110\105\110\103\67\32\34\32\115\105\110\103\108\101\32\34\10\32\32\119\97\114\110\105\110\103\32\34\119\97\114\110\105\110\103\34\10\32\32\119\97\114\110\105\110\103\67\32\34\35\84\104\105\115\32\115\104\111\117\108\100\32\98\101\32\34\10\32\32\119\97\114\110\105\110\103\32\34\97\110\111\116\104\101\114\32\111\110\101\34\10")
do
local f = T.makeCfunc("\32\32\32\32\103\101\116\103\108\111\98\97\108\32\101\114\114\111\114\10\32\32\32\32\112\117\115\104\115\116\114\105\110\103\32\98\111\108\97\10\32\32\32\32\112\99\97\108\108\32\49\32\49\32\49\32\32\32\35\32\99\97\108\108\32\39\101\114\114\111\114\39\32\119\105\116\104\32\103\105\118\101\110\32\104\97\110\100\108\101\114\10\32\32\32\32\112\117\115\104\115\116\97\116\117\115\10\32\32\32\32\114\101\116\117\114\110\32\50\32\32\32\32\32\35\32\114\101\116\117\114\110\32\101\114\114\111\114\32\109\101\115\115\97\103\101\32\97\110\100\32\115\116\97\116\117\115\10\32\32")
local msg,st = f(string.upper)
assert(st == "\69\82\82\82\85\78" and msg == "\66\79\76\65")
local msg,st = f(string.len)
assert(st == "\69\82\82\82\85\78" and msg == 4)
end
t=pack(T.testC("\105\110\115\101\114\116\32\51\59\32\112\117\115\104\118\97\108\117\101\32\51\59\32\114\101\109\111\118\101\32\51\59\32\112\117\115\104\118\97\108\117\101\32\50\59\32\114\101\109\111\118\101\32\50\59\32\10\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\105\110\115\101\114\116\32\50\59\32\112\117\115\104\118\97\108\117\101\32\49\59\32\114\101\109\111\118\101\32\49\59\32\105\110\115\101\114\116\32\49\59\32\10\32\32\32\32\32\32\105\110\115\101\114\116\32\45\50\59\32\112\117\115\104\118\97\108\117\101\32\45\50\59\32\114\101\109\111\118\101\32\45\51\59\32\114\101\116\117\114\110\32\42",2,3,4,5,10,40,90))
tcheck(t,{["\110"] = 7,2,3,4,5,10,40,90})
t=pack(T.testC("\99\111\110\99\97\116\32\53\59\32\114\101\116\117\114\110\32\42","\97\108\111",2,3,"\106\111\97\111",12))
tcheck(t,{["\110"] = 1,"\97\108\111\50\51\106\111\97\111\49\50"})
t=pack(T.testC("\99\97\108\108\32\50\44\45\49\59\32\114\101\116\117\114\110\32\42",function (a,b)
return 1,2,3,4,a,b
end,"\97\108\111","\106\111\97\111"))
tcheck(t,{["\110"] = 6,1,2,3,4,"\97\108\111","\106\111\97\111"})
do
local a = {}
for i = 1, 1000
do
a[i]=true
end
;
a[999]=10
local b = T.testC("\112\99\97\108\108\32\49\32\45\49\32\48\59\32\112\111\112\32\49\59\32\116\111\115\116\114\105\110\103\32\45\49\59\32\114\101\116\117\114\110\32\49",table.unpack,a)
assert(b == "\49\48")
end
_G.AA=14
;
_G.BB="\97\51\49"
local a = {T.testC("\32\32\103\101\116\103\108\111\98\97\108\32\65\65\59\10\32\32\103\101\116\103\108\111\98\97\108\32\66\66\59\10\32\32\103\101\116\103\108\111\98\97\108\32\66\66\59\10\32\32\115\101\116\103\108\111\98\97\108\32\65\65\59\10\32\32\114\101\116\117\114\110\32\42\10")}
assert(a[2] == 14 and a[3] == "\97\51\49" and a[4] == nil and _G.AA == "\97\51\49")
_G.AA,_G.BB=nil
assert(T.testC("\112\117\115\104\110\117\109\32\49\48\59\32\112\117\115\104\110\117\109\32\50\48\59\32\97\114\105\116\104\32\47\59\32\114\101\116\117\114\110\32\49") == 0.5)
assert(T.testC("\112\117\115\104\110\117\109\32\49\48\59\32\112\117\115\104\110\117\109\32\50\48\59\32\97\114\105\116\104\32\45\59\32\114\101\116\117\114\110\32\49") == - 10)
assert(T.testC("\112\117\115\104\110\117\109\32\49\48\59\32\112\117\115\104\110\117\109\32\45\50\48\59\32\97\114\105\116\104\32\42\59\32\114\101\116\117\114\110\32\49") == - 200)
assert(T.testC("\112\117\115\104\110\117\109\32\49\48\59\32\112\117\115\104\110\117\109\32\51\59\32\97\114\105\116\104\32\94\59\32\114\101\116\117\114\110\32\49") == 1000)
assert(T.testC("\112\117\115\104\110\117\109\32\49\48\59\32\112\117\115\104\115\116\114\105\110\103\32\50\48\59\32\97\114\105\116\104\32\47\59\32\114\101\116\117\114\110\32\49") == 0.5)
assert(T.testC("\112\117\115\104\115\116\114\105\110\103\32\49\48\59\32\112\117\115\104\110\117\109\32\50\48\59\32\97\114\105\116\104\32\45\59\32\114\101\116\117\114\110\32\49") == - 10)
assert(T.testC("\112\117\115\104\115\116\114\105\110\103\32\49\48\59\32\112\117\115\104\115\116\114\105\110\103\32\45\50\48\59\32\97\114\105\116\104\32\42\59\32\114\101\116\117\114\110\32\49") == - 200)
assert(T.testC("\112\117\115\104\115\116\114\105\110\103\32\49\48\59\32\112\117\115\104\115\116\114\105\110\103\32\51\59\32\97\114\105\116\104\32\94\59\32\114\101\116\117\114\110\32\49") == 1000)
assert(T.testC("\97\114\105\116\104\32\47\59\32\114\101\116\117\114\110\32\49",2,0) == 10.0 / 0)
a=T.testC("\112\117\115\104\110\117\109\32\49\48\59\32\112\117\115\104\105\110\116\32\51\59\32\97\114\105\116\104\32\92\59\32\114\101\116\117\114\110\32\49")
assert(a == 3.0 and math.type(a) == "\102\108\111\97\116")
a=T.testC("\112\117\115\104\105\110\116\32\49\48\59\32\112\117\115\104\105\110\116\32\51\59\32\97\114\105\116\104\32\92\59\32\114\101\116\117\114\110\32\49")
assert(a == 3 and math.type(a) == "\105\110\116\101\103\101\114")
a=assert(T.testC("\112\117\115\104\105\110\116\32\49\48\59\32\112\117\115\104\105\110\116\32\51\59\32\97\114\105\116\104\32\43\59\32\114\101\116\117\114\110\32\49"))
assert(a == 13 and math.type(a) == "\105\110\116\101\103\101\114")
a=assert(T.testC("\112\117\115\104\110\117\109\32\49\48\59\32\112\117\115\104\105\110\116\32\51\59\32\97\114\105\116\104\32\43\59\32\114\101\116\117\114\110\32\49"))
assert(a == 13 and math.type(a) == "\102\108\111\97\116")
a,b,c=T.testC("\112\117\115\104\110\117\109\32\49\59\10\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\112\117\115\104\115\116\114\105\110\103\32\49\48\59\32\97\114\105\116\104\32\95\59\10\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\32\112\117\115\104\115\116\114\105\110\103\32\53\59\32\114\101\116\117\114\110\32\51")
assert(a == 1 and b == - 10 and c == "\53")
local mt = {["\95\95\97\100\100"] = function (a,b)
return setmetatable({a[1] + b[1]},mt)
end,["\95\95\109\111\100"] = function (a,b)
return setmetatable({a[1] % b[1]},mt)
end,["\95\95\117\110\109"] = function (a)
return setmetatable({a[1] * 2},mt)
end}
a,b,c=setmetatable({4},mt),setmetatable({8},mt),setmetatable({- 3},mt)
local x,y,z = T.testC("\97\114\105\116\104\32\43\59\32\114\101\116\117\114\110\32\50",10,a,b)
assert(x == 10 and y[1] == 12 and z == nil)
assert(T.testC("\97\114\105\116\104\32\37\59\32\114\101\116\117\114\110\32\49",a,c)[1] == 4 % - 3)
assert(T.testC("\97\114\105\116\104\32\95\59\32\97\114\105\116\104\32\43\59\32\97\114\105\116\104\32\37\59\32\114\101\116\117\114\110\32\49",b,a,c)[1] == 8 % (4 + (- 3) * 2))
checkerr("\100\105\118\105\100\101\32\98\121\32\122\101\114\111",T.testC,"\97\114\105\116\104\32\92",10,0)
checkerr("\37\37\48",T.testC,"\97\114\105\116\104\32\37",10,0)
assert(T.testC("\99\111\109\112\97\114\101\32\76\84\32\50\32\53\44\32\114\101\116\117\114\110\32\49",3,2,2,4,2,2))
assert(T.testC("\99\111\109\112\97\114\101\32\76\69\32\50\32\53\44\32\114\101\116\117\114\110\32\49",3,2,2,4,2,2))
assert(not T.testC("\99\111\109\112\97\114\101\32\76\84\32\51\32\52\44\32\114\101\116\117\114\110\32\49",3,2,2,4,2,2))
assert(T.testC("\99\111\109\112\97\114\101\32\76\69\32\51\32\52\44\32\114\101\116\117\114\110\32\49",3,2,2,4,2,2))
assert(T.testC("\99\111\109\112\97\114\101\32\76\84\32\53\32\50\44\32\114\101\116\117\114\110\32\49",4,2,2,3,2,2))
assert(not T.testC("\99\111\109\112\97\114\101\32\76\84\32\50\32\45\51\44\32\114\101\116\117\114\110\32\49","\52","\50","\50","\51","\50","\50"))
assert(not T.testC("\99\111\109\112\97\114\101\32\76\84\32\45\51\32\50\44\32\114\101\116\117\114\110\32\49","\51","\50","\50","\52","\50","\50"))
assert(not T.testC("\99\111\109\112\97\114\101\32\76\84\32\49\32\52\44\32\114\101\116\117\114\110\32\49"))
assert(not T.testC("\99\111\109\112\97\114\101\32\76\69\32\57\32\49\44\32\114\101\116\117\114\110\32\49"))
assert(not T.testC("\99\111\109\112\97\114\101\32\69\81\32\57\32\57\44\32\114\101\116\117\114\110\32\49"))
local b = {["\95\95\108\116"] = function (a,b)
return a[1] < b[1]
end}
local a1,a3,a4 = setmetatable({1},b),setmetatable({3},b),setmetatable({4},b)
assert(T.testC("\99\111\109\112\97\114\101\32\76\84\32\50\32\53\44\32\114\101\116\117\114\110\32\49",a3,2,2,a4,2,2))
assert(T.testC("\99\111\109\112\97\114\101\32\76\69\32\50\32\53\44\32\114\101\116\117\114\110\32\49",a3,2,2,a4,2,2))
assert(T.testC("\99\111\109\112\97\114\101\32\76\84\32\53\32\45\54\44\32\114\101\116\117\114\110\32\49",a4,2,2,a3,2,2))
a,b=T.testC("\99\111\109\112\97\114\101\32\76\84\32\53\32\45\54\44\32\114\101\116\117\114\110\32\50",a1,2,2,a3,2,20)
assert(a == 20 and b == false)
a,b=T.testC("\99\111\109\112\97\114\101\32\76\69\32\53\32\45\54\44\32\114\101\116\117\114\110\32\50",a1,2,2,a3,2,20)
assert(a == 20 and b == false)
a,b=T.testC("\99\111\109\112\97\114\101\32\76\69\32\53\32\45\54\44\32\114\101\116\117\114\110\32\50",a1,2,2,a1,2,20)
assert(a == 20 and b == true)
do
local mt = {["\95\95\108\116"] = function (a,b)
return a[1] < b[1]
end,["\95\95\108\101"] = function (a,b)
return a[1] <= b[1]
end,["\95\95\101\113"] = function (a,b)
return a[1] == b[1]
end}
local function O
(x)
return setmetatable({x},mt)
end
local a,b = T.testC("\99\111\109\112\97\114\101\32\76\84\32\50\32\51\59\32\112\117\115\104\105\110\116\32\49\48\59\32\114\101\116\117\114\110\32\50",O(1),O(2))
assert(a == true and b == 10)
local a,b = T.testC("\99\111\109\112\97\114\101\32\76\69\32\50\32\51\59\32\112\117\115\104\105\110\116\32\49\48\59\32\114\101\116\117\114\110\32\50",O(3),O(2))
assert(a == false and b == 10)
local a,b = T.testC("\99\111\109\112\97\114\101\32\69\81\32\50\32\51\59\32\112\117\115\104\105\110\116\32\49\48\59\32\114\101\116\117\114\110\32\50",O(3),O(3))
assert(a == true and b == 10)
end
local t = setmetatable({["\120"] = 20},{["\95\95\108\101\110"] = function (t)
return t.x
end})
a,b,c=T.testC("\32\32\32\108\101\110\32\50\59\10\32\32\32\76\108\101\110\32\50\59\10\32\32\32\111\98\106\115\105\122\101\32\50\59\10\32\32\32\114\101\116\117\114\110\32\51\10",t)
assert(a == 20 and b == 20 and c == 0)
t.x="\50\51\52"
;
t[1]=20
a,b,c=T.testC("\32\32\32\108\101\110\32\50\59\10\32\32\32\76\108\101\110\32\50\59\10\32\32\32\111\98\106\115\105\122\101\32\50\59\10\32\32\32\114\101\116\117\114\110\32\51\10",t)
assert(a == "\50\51\52" and b == 234 and c == 1)
t.x=print
;
t[1]=20
a,c=T.testC("\32\32\32\108\101\110\32\50\59\10\32\32\32\111\98\106\115\105\122\101\32\50\59\10\32\32\32\114\101\116\117\114\110\32\50\10",t)
assert(a == print and c == 1)
a=setmetatable({["\120"] = "\117"},{["\95\95\99\111\110\99\97\116"] = function (a,b)
return a.x .. "\46" .. b.x
end})
x,y=T.testC("\32\32\112\117\115\104\110\117\109\32\53\10\32\32\112\117\115\104\118\97\108\117\101\32\50\59\10\32\32\112\117\115\104\118\97\108\117\101\32\50\59\10\32\32\99\111\110\99\97\116\32\50\59\10\32\32\112\117\115\104\118\97\108\117\101\32\45\50\59\10\32\32\114\101\116\117\114\110\32\50\59\10",a,a)
assert(x == a .. a and y == 5)
assert(T.testC("\99\111\110\99\97\116\32\48\59\32\114\101\116\117\114\110\32\49") == "")
assert(T.testC("\99\111\110\99\97\116\32\49\59\32\114\101\116\117\114\110\32\49","\120\117\120\117") == "\120\117\120\117")
local function B
(x)
return x and 1 or 0
end
local function count
(x,n)
n=n or 2
local prog = "\32\32\32\32\105\115\110\117\109\98\101\114\32\37\100\59\10\32\32\32\32\105\115\115\116\114\105\110\103\32\37\100\59\10\32\32\32\32\105\115\102\117\110\99\116\105\111\110\32\37\100\59\10\32\32\32\32\105\115\99\102\117\110\99\116\105\111\110\32\37\100\59\10\32\32\32\32\105\115\116\97\98\108\101\32\37\100\59\10\32\32\32\32\105\115\117\115\101\114\100\97\116\97\32\37\100\59\10\32\32\32\32\105\115\110\105\108\32\37\100\59\10\32\32\32\32\105\115\110\117\108\108\32\37\100\59\10\32\32\32\32\114\101\116\117\114\110\32\56\10\32\32"
prog=string.format(prog,n,n,n,n,n,n,n,n)
local a,b,c,d,e,f,g,h = T.testC(prog,x)
return B(a) + B(b) + B(c) + B(d) + B(e) + B(f) + B(g) + (100 * B(h))
end
assert(count(3) == 2)
assert(count("\97\108\111") == 1)
assert(count("\51\50") == 2)
assert(count({}) == 1)
assert(count(print) == 2)
assert(count(function ()

end) == 1)
assert(count(nil) == 1)
assert(count(io.stdin) == 1)
assert(count(nil,15) == 100)
local function to
(s,x,n)
n=n or 2
return T.testC(string.format("\37\115\32\37\100\59\32\114\101\116\117\114\110\32\49",s,n),x)
end
local null = T.pushuserdata(0)
local hfunc = string.gmatch("","")
assert(debug.getupvalue(hfunc,1))
assert(to("\116\111\115\116\114\105\110\103",{}) == nil)
assert(to("\116\111\115\116\114\105\110\103","\97\108\111") == "\97\108\111")
assert(to("\116\111\115\116\114\105\110\103",12) == "\49\50")
assert(to("\116\111\115\116\114\105\110\103",12,3) == nil)
assert(to("\111\98\106\115\105\122\101",{}) == 0)
assert(to("\111\98\106\115\105\122\101",{1,2,3}) == 3)
assert(to("\111\98\106\115\105\122\101","\97\108\111\97") == 6)
assert(to("\111\98\106\115\105\122\101",T.newuserdata(0)) == 0)
assert(to("\111\98\106\115\105\122\101",T.newuserdata(101)) == 101)
assert(to("\111\98\106\115\105\122\101",124) == 0)
assert(to("\111\98\106\115\105\122\101",true) == 0)
assert(to("\116\111\110\117\109\98\101\114",{}) == 0)
assert(to("\116\111\110\117\109\98\101\114","\49\50") == 12)
assert(to("\116\111\110\117\109\98\101\114","\115\50") == 0)
assert(to("\116\111\110\117\109\98\101\114",1,20) == 0)
assert(to("\116\111\112\111\105\110\116\101\114",10) == null)
assert(to("\116\111\112\111\105\110\116\101\114",true) == null)
assert(to("\116\111\112\111\105\110\116\101\114",nil) == null)
assert(to("\116\111\112\111\105\110\116\101\114","\97\98\99") ~= null)
assert(to("\116\111\112\111\105\110\116\101\114",string.rep("\120",10)) == to("\116\111\112\111\105\110\116\101\114",string.rep("\120",10)))
do
local s1 = string.rep("\120",300)
local s2 = string.rep("\120",300)
assert(to("\116\111\112\111\105\110\116\101\114",s1) ~= to("\116\111\112\111\105\110\116\101\114",s2))
end
assert(to("\116\111\112\111\105\110\116\101\114",T.pushuserdata(20)) ~= null)
assert(to("\116\111\112\111\105\110\116\101\114",io.read) ~= null)
assert(to("\116\111\112\111\105\110\116\101\114",hfunc) ~= null)
assert(to("\116\111\112\111\105\110\116\101\114",function ()

end) ~= null)
assert(to("\116\111\112\111\105\110\116\101\114",io.stdin) ~= null)
assert(to("\102\117\110\99\50\110\117\109",20) == 0)
assert(to("\102\117\110\99\50\110\117\109",T.pushuserdata(10)) == 0)
assert(to("\102\117\110\99\50\110\117\109",io.read) ~= 0)
assert(to("\102\117\110\99\50\110\117\109",hfunc) ~= 0)
a=to("\116\111\99\102\117\110\99\116\105\111\110",math.deg)
assert(a(3) == math.deg(3) and a == math.deg)
print("\116\101\115\116\105\110\103\32\112\97\110\105\99\32\102\117\110\99\116\105\111\110")
do
assert(T.checkpanic("\112\117\115\104\115\116\114\105\110\103\32\104\105\59\32\101\114\114\111\114") == "\104\105")
assert(T.checkpanic("\112\117\115\104\115\116\114\105\110\103\32\104\105\59\32\101\114\114\111\114\59","\99\104\101\99\107\115\116\97\99\107\32\53\32\88\88\10\32\32\32\32\32\32\112\117\115\104\115\116\114\105\110\103\32\39\32\97\108\111\39\10\32\32\32\32\32\32\112\117\115\104\115\116\114\105\110\103\32\39\32\109\117\110\100\111\39\10\32\32\32\32\32\32\99\111\110\99\97\116\32\51") == "\104\105\32\97\108\111\32\109\117\110\100\111")
assert(T.checkpanic("\108\111\97\100\115\116\114\105\110\103\32\52") == "\98\97\100\32\97\114\103\117\109\101\110\116\32\35\52\32\40\115\116\114\105\110\103\32\101\120\112\101\99\116\101\100\44\32\103\111\116\32\110\111\32\118\97\108\117\101\41")
T.totalmem(T.totalmem() + 10000)
assert(T.checkpanic("\110\101\119\117\115\101\114\100\97\116\97\32\50\48\48\48\48") == MEMERRMSG)
T.totalmem(0)
if not _soft then
local msg = T.checkpanic("\32\32\32\32\32\32\112\117\115\104\115\116\114\105\110\103\32\34\102\117\110\99\116\105\111\110\32\102\40\41\32\102\40\41\32\101\110\100\34\10\32\32\32\32\32\32\108\111\97\100\115\116\114\105\110\103\32\45\49\59\32\99\97\108\108\32\48\32\48\10\32\32\32\32\32\32\103\101\116\103\108\111\98\97\108\32\102\59\32\99\97\108\108\32\48\32\48\10\32\32\32\32")
assert(string.find(msg,"\115\116\97\99\107\32\111\118\101\114\102\108\111\119"))
end
assert(T.checkpanic("\32\32\32\32\112\117\115\104\115\116\114\105\110\103\32\34\114\101\116\117\114\110\32\123\95\95\99\108\111\115\101\32\61\32\102\117\110\99\116\105\111\110\32\40\41\32\89\32\61\32\39\104\111\39\59\32\101\110\100\125\34\10\32\32\32\32\110\101\119\116\97\98\108\101\10\32\32\32\32\108\111\97\100\115\116\114\105\110\103\32\45\50\10\32\32\32\32\99\97\108\108\32\48\32\49\10\32\32\32\32\115\101\116\109\101\116\97\116\97\98\108\101\32\45\50\10\32\32\32\32\116\111\99\108\111\115\101\32\45\49\10\32\32\32\32\112\117\115\104\115\116\114\105\110\103\32\34\104\105\34\10\32\32\32\32\101\114\114\111\114\10\32\32","\32\32\32\32\103\101\116\103\108\111\98\97\108\32\89\10\32\32\32\32\99\111\110\99\97\116\32\50\32\32\32\32\32\32\32\32\32\35\32\99\111\110\99\97\116\32\111\114\105\103\105\110\97\108\32\101\114\114\111\114\32\119\105\116\104\32\103\108\111\98\97\108\32\89\10\32\32") == "\104\105\104\111")
end
if not _soft then
print("\116\101\115\116\105\110\103\32\115\116\97\99\107\32\111\118\101\114\102\108\111\119")
collectgarbage("\115\116\111\112")
checkerr("\88\88\88\88",T.testC,"\99\104\101\99\107\115\116\97\99\107\32\49\48\48\48\48\50\51\32\88\88\88\88")
checkerr("\94\115\116\97\99\107\32\111\118\101\114\102\108\111\119\36",T.testC,"\99\104\101\99\107\115\116\97\99\107\32\49\48\48\48\48\50\51\32\39\39")
local s = string.rep("\112\117\115\104\110\105\108\59\99\104\101\99\107\115\116\97\99\107\32\49\32\88\88\59",1000000)
checkerr("\111\118\101\114\102\108\111\119",T.testC,s)
collectgarbage("\114\101\115\116\97\114\116")
print("\43")
end
local lim = _soft and 500 or 12000
local prog = {"\99\104\101\99\107\115\116\97\99\107\32" .. (lim * 2 + 100) .. "\109\115\103","\110\101\119\116\97\98\108\101"}
for i = 1, lim
do
prog[# prog + 1]="\112\117\115\104\110\117\109\32" .. i
prog[# prog + 1]="\112\117\115\104\110\117\109\32" .. i * 10
end
prog[# prog + 1]="\114\97\119\103\101\116\105\32\82\32\50"
prog[# prog + 1]="\105\110\115\101\114\116\32" .. - (2 * lim + 2)
for i = 1, lim
do
prog[# prog + 1]="\115\101\116\116\97\98\108\101\32" .. - (2 * (lim - i + 1) + 1)
end
prog[# prog + 1]="\114\101\116\117\114\110\32\50"
prog=table.concat(prog,"\59")
local g,t = T.testC(prog)
assert(g == _G)
for i = 1, lim
do
assert(t[i] == i * 10)
;
t[i]=undef
end
assert(next(t) == nil)
prog,g,t=nil
a=T.testC("\32\32\108\111\97\100\115\116\114\105\110\103\32\50\59\32\112\99\97\108\108\32\48\32\49\32\48\59\10\32\32\112\117\115\104\118\97\108\117\101\32\51\59\32\105\110\115\101\114\116\32\45\50\59\32\112\99\97\108\108\32\49\32\49\32\48\59\10\32\32\112\99\97\108\108\32\48\32\48\32\48\59\10\32\32\114\101\116\117\114\110\32\49\10","\88\88\61\49\53\48",function (a)
assert(a == nil)
;
return 3
end)
assert(type(a) == "\115\116\114\105\110\103" and XX == 150)
_G.XX=nil
local function check3
(p, ...)
local arg = {...}
assert(# arg == 3)
assert(string.find(arg[3],p))
end
check3("\58\49\58",T.testC("\108\111\97\100\115\116\114\105\110\103\32\50\59\32\114\101\116\117\114\110\32\42","\120\61"))
check3("\37\46",T.testC("\108\111\97\100\102\105\108\101\32\50\59\32\114\101\116\117\114\110\32\42","\46"))
check3("\120\120\120\120",T.testC("\108\111\97\100\102\105\108\101\32\50\59\32\114\101\116\117\114\110\32\42","\120\120\120\120"))
local function checkerrnopro
(code,msg)
local th = coroutine.create(function ()

end)
local stt,err = pcall(T.testC,th,code)
assert(not stt and string.find(err,msg))
end
if not _soft then
collectgarbage("\115\116\111\112")
checkerrnopro("\112\117\115\104\110\117\109\32\51\59\32\99\97\108\108\32\48\32\48","\97\116\116\101\109\112\116\32\116\111\32\99\97\108\108")
print("\116\101\115\116\105\110\103\32\115\116\97\99\107\32\111\118\101\114\102\108\111\119\32\105\110\32\117\110\112\114\111\116\101\99\116\101\100\32\116\104\114\101\97\100")
function F()
F()
end
checkerrnopro("\103\101\116\103\108\111\98\97\108\32\39\70\39\59\32\99\97\108\108\32\48\32\48\59","\115\116\97\99\107\32\111\118\101\114\102\108\111\119")
F=nil
collectgarbage("\114\101\115\116\97\114\116")
end
print("\43")
do
local a = {}
local a1 = T.testC("\114\97\119\115\101\116\112\32\50\32\49\59\32\114\101\116\117\114\110\32\49",a,20)
assert(a == a1)
assert(a[T.pushuserdata(1)] == 20)
local a1,res = T.testC("\114\97\119\103\101\116\112\32\45\49\32\49\59\32\114\101\116\117\114\110\32\50",a)
assert(a == a1 and res == 20)
end
do
local a = {}
a[a]=10
local prog = "\103\101\116\116\97\98\108\101\32\45\49\59\32\114\101\116\117\114\110\32\42"
local res = {T.testC(prog,a)}
assert(# res == 2 and res[1] == prog and res[2] == 10)
local prog = "\115\101\116\116\97\98\108\101\32\45\50\59\32\114\101\116\117\114\110\32\42"
local res = {T.testC(prog,a,20)}
assert(a[a] == 20)
assert(# res == 1 and res[1] == prog)
a[a]=10
local prog = "\114\97\119\103\101\116\32\45\49\59\32\114\101\116\117\114\110\32\42"
local res = {T.testC(prog,a)}
assert(# res == 2 and res[1] == prog and res[2] == 10)
local prog = "\114\97\119\115\101\116\32\45\50\59\32\114\101\116\117\114\110\32\42"
local res = {T.testC(prog,a,20)}
assert(a[a] == 20)
assert(# res == 1 and res[1] == prog)
local prog = "\114\97\119\115\101\116\32\45\49\59\32\114\101\116\117\114\110\32\42"
local res = {T.testC(prog,30,a)}
assert(a[30] == a)
assert(# res == 1 and res[1] == prog)
local prog = "\115\101\116\116\97\98\108\101\32\45\49\59\32\114\101\116\117\114\110\32\42"
local res = {T.testC(prog,40,a)}
assert(a[40] == a)
assert(# res == 1 and res[1] == prog)
local prog = "\114\97\119\115\101\116\105\32\45\49\32\49\48\48\59\32\114\101\116\117\114\110\32\42"
local res = {T.testC(prog,a)}
assert(a[100] == a)
assert(# res == 1 and res[1] == prog)
local prog = "\115\101\116\105\32\45\49\32\50\48\48\59\32\114\101\116\117\114\110\32\42"
local res = {T.testC(prog,a)}
assert(a[200] == a)
assert(# res == 1 and res[1] == prog)
end
a={["\120"] = 0,["\121"] = 12}
x,y=T.testC("\103\101\116\116\97\98\108\101\32\50\59\32\112\117\115\104\118\97\108\117\101\32\52\59\32\103\101\116\116\97\98\108\101\32\50\59\32\114\101\116\117\114\110\32\50",a,3,"\121",4,"\120")
assert(x == 0 and y == 12)
T.testC("\115\101\116\116\97\98\108\101\32\45\53",a,3,4,"\120",15)
assert(a.x == 15)
a[a]=print
x=T.testC("\103\101\116\116\97\98\108\101\32\50\59\32\114\101\116\117\114\110\32\49",a)
assert(x == print)
T.testC("\115\101\116\116\97\98\108\101\32\50",a,"\120")
assert(a[a] == "\120")
b=setmetatable({["\112"] = a},{})
getmetatable(b).__index=function (t,i)
return t.p[i]
end
local k,x = T.testC("\103\101\116\116\97\98\108\101\32\51\44\32\114\101\116\117\114\110\32\50",4,b,20,35,"\120")
assert(x == 15 and k == 35)
k=T.testC("\103\101\116\102\105\101\108\100\32\50\32\121\44\32\114\101\116\117\114\110\32\49",b)
assert(k == 12)
getmetatable(b).__index=function (t,i)
return a[i]
end
getmetatable(b).__newindex=function (t,i,v)
a[i]=v
end
y=T.testC("\105\110\115\101\114\116\32\50\59\32\103\101\116\116\97\98\108\101\32\45\53\59\32\114\101\116\117\114\110\32\49",2,3,4,"\121",b)
assert(y == 12)
k=T.testC("\115\101\116\116\97\98\108\101\32\45\53\44\32\114\101\116\117\114\110\32\49",b,3,4,"\120",16)
assert(a.x == 16 and k == 4)
a[b]="\120\117\120\117"
y=T.testC("\103\101\116\116\97\98\108\101\32\50\44\32\114\101\116\117\114\110\32\49",b)
assert(y == "\120\117\120\117")
T.testC("\115\101\116\116\97\98\108\101\32\50",b,19)
assert(a[b] == 19)
do
local t = {["\95\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57"] = 32}
local a = T.testC("\32\32\32\32\103\101\116\102\105\101\108\100\32\50\32\95\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\10\32\32\32\32\114\101\116\117\114\110\32\49\10\32\32",t)
assert(a == 32)
local a = T.testC("\32\32\32\32\112\117\115\104\110\117\109\32\51\51\10\32\32\32\32\115\101\116\103\108\111\98\97\108\32\95\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57\10\32\32")
assert(_012345678901234567890123456789012345678901234567890123456789 == 33)
_012345678901234567890123456789012345678901234567890123456789=nil
end
a={}
t=pack(T.testC("\110\101\120\116\59\32\114\101\116\117\114\110\32\42",a,nil))
tcheck(t,{["\110"] = 1,a})
a={["\97"] = 3}
t=pack(T.testC("\110\101\120\116\59\32\114\101\116\117\114\110\32\42",a,nil))
tcheck(t,{["\110"] = 3,a,"\97",3})
t=pack(T.testC("\110\101\120\116\59\32\112\111\112\32\49\59\32\110\101\120\116\59\32\114\101\116\117\114\110\32\42",a,nil))
tcheck(t,{["\110"] = 1,a})
do
local A = T.testC("\32\112\117\115\104\110\117\109\32\49\48\59\32\112\117\115\104\110\117\109\32\50\48\59\32\112\117\115\104\99\99\108\111\115\117\114\101\32\50\59\32\114\101\116\117\114\110\32\49")
t,b,c=A("\112\117\115\104\118\97\108\117\101\32\85\48\59\32\112\117\115\104\118\97\108\117\101\32\85\49\59\32\112\117\115\104\118\97\108\117\101\32\85\50\59\32\114\101\116\117\114\110\32\51")
assert(b == 10 and c == 20 and type(t) == "\116\97\98\108\101")
a,b=A("\116\111\115\116\114\105\110\103\32\85\51\59\32\116\111\110\117\109\98\101\114\32\85\52\59\32\114\101\116\117\114\110\32\50")
assert(a == nil and b == 0)
A("\112\117\115\104\110\117\109\32\49\48\48\59\32\112\117\115\104\110\117\109\32\50\48\48\59\32\114\101\112\108\97\99\101\32\85\50\59\32\114\101\112\108\97\99\101\32\85\49")
b,c=A("\112\117\115\104\118\97\108\117\101\32\85\49\59\32\112\117\115\104\118\97\108\117\101\32\85\50\59\32\114\101\116\117\114\110\32\50")
assert(b == 100 and c == 200)
A("\114\101\112\108\97\99\101\32\85\50\59\32\114\101\112\108\97\99\101\32\85\49",{["\120"] = 1},{["\120"] = 2})
b,c=A("\112\117\115\104\118\97\108\117\101\32\85\49\59\32\112\117\115\104\118\97\108\117\101\32\85\50\59\32\114\101\116\117\114\110\32\50")
assert(b.x == 1 and c.x == 2)
T.checkmemory()
end
assert(T.testC("\105\115\110\117\108\108\32\85\49\59\32\114\101\116\117\114\110\32\49") == true)
assert(T.testC("\105\115\110\117\108\108\32\85\49\48\48\59\32\114\101\116\117\114\110\32\49") == true)
assert(T.testC("\112\117\115\104\118\97\108\117\101\32\85\49\59\32\114\101\116\117\114\110\32\49") == nil)
local f = T.testC("\32\112\117\115\104\110\117\109\32\49\48\59\32\112\117\115\104\110\117\109\32\50\48\59\32\112\117\115\104\99\99\108\111\115\117\114\101\32\50\59\32\114\101\116\117\114\110\32\49")
assert(T.upvalue(f,1) == 10 and T.upvalue(f,2) == 20 and T.upvalue(f,3) == nil)
T.upvalue(f,2,"\120\117\120\117")
assert(T.upvalue(f,2) == "\120\117\120\117")
do
local A = "\99\104\101\99\107\115\116\97\99\107\32\51\48\48\32\109\115\103\59" .. string.rep("\112\117\115\104\110\117\109\32\49\48\59",255) .. "\112\117\115\104\99\99\108\111\115\117\114\101\32\50\53\53\59\32\114\101\116\117\114\110\32\49"
A=T.testC(A)
for i = 1, 255
do
assert(A(("\112\117\115\104\118\97\108\117\101\32\85\37\100\59\32\114\101\116\117\114\110\32\49"):format(i)) == 10)
end
assert(A("\105\115\110\117\108\108\32\85\50\53\54\59\32\114\101\116\117\114\110\32\49"))
assert(not A("\105\115\110\105\108\32\85\50\53\54\59\32\114\101\116\117\114\110\32\49"))
end
checkerr("\103\111\116\32\110\117\109\98\101\114",debug.setuservalue,3,{})
checkerr("\103\111\116\32\110\105\108",debug.setuservalue,nil,{})
checkerr("\103\111\116\32\108\105\103\104\116\32\117\115\101\114\100\97\116\97",debug.setuservalue,T.pushuserdata(1),{})
local b = T.newuserdata(0,10)
for i = 1, 10
do
local v,p = debug.getuservalue(b,i)
assert(v == nil and p)
end
do
local v,p = debug.getuservalue(b,- 2)
assert(v == nil and not p)
local v,p = debug.getuservalue(b,11)
assert(v == nil and not p)
end
local t = {true,false,4.56,print,{},b,"\88\89\90"}
for k,v in ipairs(t)
do
debug.setuservalue(b,v,k)
end
for k,v in ipairs(t)
do
local v1,p = debug.getuservalue(b,k)
assert(v1 == v and p)
end
assert(not debug.getuservalue(4))
debug.setuservalue(b,function ()
return 10
end,10)
collectgarbage()
assert(debug.getuservalue(b,10)() == 10)
debug.setuservalue(b,134)
collectgarbage()
assert(debug.getuservalue(b) == 134)
do
local oldmode = collectgarbage("\105\110\99\114\101\109\101\110\116\97\108")
T.gcstate("\97\116\111\109\105\99")
assert(T.gccolor(b) == "\98\108\97\99\107")
debug.setuservalue(b,{["\120"] = 100})
T.gcstate("\112\97\117\115\101")
assert(debug.getuservalue(b).x == 100)
collectgarbage(oldmode)
end
for i = 1, 1000
do
local bb = T.newuserdata(0,1)
debug.setuservalue(bb,b)
b=bb
end
collectgarbage()
for i = 1, 1000
do
b=debug.getuservalue(b)
end
assert(debug.getuservalue(b).x == 100)
b=nil
local i = T.ref({})
T.unref(i)
assert(T.ref({}) == i)
local Arr = {}
local Lim = 100
for i = 1, Lim
do
Arr[i]=T.ref({})
end
assert(T.ref(nil) == - 1 and T.getref(- 1) == nil)
T.unref(- 1)
;
T.unref(- 1)
for i = 1, Lim
do
T.unref(Arr[i])
end
local function printlocks
()
local f = T.makeCfunc("\103\101\116\116\97\98\108\101\32\82\59\32\114\101\116\117\114\110\32\49")
local n = f("\110")
print("\110",n)
for i = 0, n
do
print(i,f(i))
end
end
for i = 1, Lim
do
Arr[i]=T.ref({})
end
for i = 1, Lim, 2
do
T.unref(Arr[i])
end
assert(type(T.getref(Arr[2])) == "\116\97\98\108\101")
assert(T.getref(- 1) == nil)
a=T.ref({})
collectgarbage()
assert(type(T.getref(a)) == "\116\97\98\108\101")
local tt = {}
local cl = {["\110"] = 0}
A=nil
;
B=nil
local F
F=function (x)
local udval = T.udataval(x)
table.insert(cl,udval)
local d = T.newuserdata(100)
d=nil
assert(debug.getmetatable(x).__gc == F)
assert(load("\116\97\98\108\101\46\105\110\115\101\114\116\40\123\125\44\32\123\125\41"))()
assert(not collectgarbage())
local dummy = {}
if A ~= nil then
assert(type(A) == "\117\115\101\114\100\97\116\97")
assert(T.udataval(A) == B)
debug.getmetatable(A)
end
A=x
B=udval
return 1,2,3
end
tt.__gc=F
do
collectgarbage()
;
collectgarbage()
;
local x = collectgarbage("\99\111\117\110\116")
;
local a = T.newuserdata(5001)
assert(T.testC("\111\98\106\115\105\122\101\32\50\59\32\114\101\116\117\114\110\32\49",a) == 5001)
assert(collectgarbage("\99\111\117\110\116") >= x + 4)
a=nil
collectgarbage()
;
assert(collectgarbage("\99\111\117\110\116") <= x + 1)
x=collectgarbage("\99\111\117\110\116")
collectgarbage("\115\116\111\112")
for i = 1, 1000
do
T.newuserdata(0)
end
assert(collectgarbage("\99\111\117\110\116") > x + 10)
collectgarbage()
assert(collectgarbage("\99\111\117\110\116") <= x + 1)
collectgarbage()
x=collectgarbage("\99\111\117\110\116")
collectgarbage("\115\116\111\112")
a={["\95\95\103\99"] = function ()

end}
for i = 1, 1000
do
debug.setmetatable(T.newuserdata(0),a)
end
assert(collectgarbage("\99\111\117\110\116") >= x + 10)
collectgarbage()
assert(collectgarbage("\99\111\117\110\116") >= x + 10)
collectgarbage()
assert(collectgarbage("\99\111\117\110\116") <= x + 1)
collectgarbage("\114\101\115\116\97\114\116")
end
collectgarbage("\115\116\111\112")
a=T.newuserdata(0)
;
debug.setmetatable(a,tt)
;
local na = T.udataval(a)
b=T.newuserdata(0)
;
debug.setmetatable(b,tt)
;
local nb = T.udataval(b)
c=T.newuserdata(0)
;
debug.setmetatable(c,tt)
;
local nc = T.udataval(c)
x=T.newuserdata(4)
y=T.newuserdata(0)
checkerr("\70\73\76\69\37\42\32\101\120\112\101\99\116\101\100\44\32\103\111\116\32\117\115\101\114\100\97\116\97",io.input,a)
checkerr("\70\73\76\69\37\42\32\101\120\112\101\99\116\101\100\44\32\103\111\116\32\117\115\101\114\100\97\116\97",io.input,x)
assert(debug.getmetatable(x) == nil and debug.getmetatable(y) == nil)
local d = T.ref(a)
;
local e = T.ref(b)
;
local f = T.ref(c)
;
t={T.getref(d),T.getref(e),T.getref(f)}
assert(t[1] == a and t[2] == b and t[3] == c)
t=nil
;
a=nil
;
c=nil
;
T.unref(e)
;
T.unref(f)
collectgarbage()
assert(# cl == 1 and cl[1] == nc)
x=T.getref(d)
assert(type(x) == "\117\115\101\114\100\97\116\97" and debug.getmetatable(x) == tt)
x=nil
tt.b=b
tt=nil
A=nil
b=nil
T.unref(d)
;
local n5 = T.newuserdata(0)
debug.setmetatable(n5,{["\95\95\103\99"] = F})
n5=T.udataval(n5)
collectgarbage()
assert(# cl == 4)
assert(cl[2] == n5 and cl[3] == nb and cl[4] == na)
collectgarbage("\114\101\115\116\97\114\116")
a,na={},{}
for i = 30, 1, - 1
do
a[i]=T.newuserdata(0)
debug.setmetatable(a[i],{["\95\95\103\99"] = F})
na[i]=T.udataval(a[i])
end
cl={}
a=nil
;
collectgarbage()
assert(# cl == 30)
for i = 1, 30
do
assert(cl[i] == na[i])
end
na=nil
for i = 2, Lim, 2
do
T.unref(Arr[i])
end
x=T.newuserdata(41)
;
debug.setmetatable(x,{["\95\95\103\99"] = F})
assert(T.testC("\111\98\106\115\105\122\101\32\50\59\32\114\101\116\117\114\110\32\49",x) == 41)
cl={}
a={[x] = 1}
x=T.udataval(x)
collectgarbage()
assert(# cl == 0)
for n in pairs(a)
do
a[n]=undef
end
collectgarbage()
assert(# cl == 1 and cl[1] == x)
assert(T.testC("\99\111\109\112\97\114\101\32\69\81\32\50\32\52\59\32\114\101\116\117\114\110\32\49",print,1,print,20))
assert(T.testC("\99\111\109\112\97\114\101\32\69\81\32\51\32\50\59\32\114\101\116\117\114\110\32\49","\97\108\111","\97\108\111"))
assert(T.testC("\99\111\109\112\97\114\101\32\69\81\32\50\32\51\59\32\114\101\116\117\114\110\32\49",nil,nil))
assert(not T.testC("\99\111\109\112\97\114\101\32\69\81\32\50\32\51\59\32\114\101\116\117\114\110\32\49",{},{}))
assert(not T.testC("\99\111\109\112\97\114\101\32\69\81\32\50\32\51\59\32\114\101\116\117\114\110\32\49"))
assert(not T.testC("\99\111\109\112\97\114\101\32\69\81\32\50\32\51\59\32\114\101\116\117\114\110\32\49",3))
do
local map = {}
local t = {["\95\95\101\113"] = function (a,b)
return map[a] == map[b]
end}
local function f
(x)
local u = T.newuserdata(0)
debug.setmetatable(u,t)
map[u]=x
return u
end
assert(f(10) == f(10))
assert(f(10) ~= f(11))
assert(T.testC("\99\111\109\112\97\114\101\32\69\81\32\50\32\51\59\32\114\101\116\117\114\110\32\49",f(10),f(10)))
assert(not T.testC("\99\111\109\112\97\114\101\32\69\81\32\50\32\51\59\32\114\101\116\117\114\110\32\49",f(10),f(20)))
t.__eq=nil
assert(f(10) ~= f(10))
end
print("\43")
_G.TT={}
T.sethook("\32\32\35\32\115\101\116\32\97\32\108\105\110\101\32\104\111\111\107\32\97\102\116\101\114\32\51\32\99\111\117\110\116\32\104\111\111\107\115\10\32\32\115\101\116\104\111\111\107\32\52\32\48\32\39\10\32\32\32\32\103\101\116\103\108\111\98\97\108\32\84\84\59\10\32\32\32\32\112\117\115\104\118\97\108\117\101\32\45\51\59\32\97\112\112\101\110\100\32\45\50\10\32\32\32\32\112\117\115\104\118\97\108\117\101\32\45\50\59\32\97\112\112\101\110\100\32\45\50\10\32\32\39","\99",3)
local a = 1
a=1
a=1
a=1
a=1
debug.sethook()
local t = _G.TT
assert(t[1] == "\108\105\110\101")
local line = t[2]
assert(t[3] == "\108\105\110\101" and t[4] == line + 1)
assert(t[5] == "\108\105\110\101" and t[6] == line + 2)
assert(t[7] == nil)
_G.TT=nil
do
warn("\64\111\102\102")
collectgarbage("\115\116\111\112")
local a = {}
for i = 1, 20
do
a[i]=T.newuserdata(i)
end
for i = 1, 20, 2
do
debug.setmetatable(a[i],{["\95\95\103\99"] = function (x)
error("\64\101\120\112\101\99\116\101\100\32\101\114\114\111\114\32\105\110\32\103\99")
end})
end
for i = 2, 20, 2
do
debug.setmetatable(a[i],{["\95\95\103\99"] = function (x)
load("\65\61\65\43\49")()
end})
end
a=nil
_G.A=0
collectgarbage()
assert(A == 10)
collectgarbage("\114\101\115\116\97\114\116")
warn("\64\111\110")
end
_G.A=nil
do
local a = {}
;
local lim = 30
for i = 0, lim
do
a[i]=T.pushuserdata(i)
end
for i = 0, lim
do
assert(T.udataval(a[i]) == i)
end
for i = 0, lim
do
assert(T.pushuserdata(i) == a[i])
end
for i = 0, lim
do
a[a[i]]=i
end
for i = 0, lim
do
a[T.pushuserdata(i)]=i
end
assert(type(tostring(a[1])) == "\115\116\114\105\110\103")
end
T.closestate(T.newstate())
;
L1=T.newstate()
assert(L1)
assert(T.doremote(L1,"\88\61\39\97\39\59\32\114\101\116\117\114\110\32\39\97\39") == "\97")
assert(# pack(T.doremote(L1,"\102\117\110\99\116\105\111\110\32\102\32\40\41\32\114\101\116\117\114\110\32\39\97\108\111\39\44\32\51\32\101\110\100\59\32\102\40\41")) == 0)
a,b=T.doremote(L1,"\114\101\116\117\114\110\32\102\40\41")
assert(a == "\97\108\111" and b == "\51")
T.doremote(L1,"\95\69\82\82\79\82\77\69\83\83\65\71\69\32\61\32\110\105\108")
a,b,c=T.doremote(L1,"\114\101\116\117\114\110\32\115\105\110\40\49\41")
assert(a == nil and c == 2)
a,b,c=T.doremote(L1,"\114\101\116\117\114\110\32\97\43")
assert(a == nil and c == 3 and type(b) == "\115\116\114\105\110\103")
T.loadlib(L1)
a,b,c=T.doremote
assert(a == "\111\107")
T.closestate(L1)
;
L1=T.newstate()
T.loadlib(L1)
T.doremote(L1,"\97\32\61\32\123\125")
T.testC(L1,"\103\101\116\103\108\111\98\97\108\32\34\97\34\59\32\112\117\115\104\115\116\114\105\110\103\32\34\120\34\59\32\112\117\115\104\105\110\116\32\49\59\10\32\32\32\32\32\32\32\32\32\32\32\32\32\115\101\116\116\97\98\108\101\32\45\51")
assert(T.doremote(L1,"\114\101\116\117\114\110\32\97\46\120") == "\49")
T.closestate(L1)
L1=nil
print("\43")
print("\116\101\115\116\105\110\103\32\116\111\45\98\101\45\99\108\111\115\101\100\32\118\97\114\105\97\98\108\101\115")
do
local openresource = {}
local function newresource
()
local x = setmetatable({10},{["\95\95\99\108\111\115\101"] = function (y)
assert(openresource[# openresource] == y)
openresource[# openresource]=nil
y[1]=y[1] + 1
end})
openresource[# openresource + 1]=x
return x
end
local a,b = T.testC("\32\32\32\32\99\97\108\108\32\48\32\49\32\32\32\35\32\99\114\101\97\116\101\32\114\101\115\111\117\114\99\101\10\32\32\32\32\112\117\115\104\110\105\108\10\32\32\32\32\116\111\99\108\111\115\101\32\45\50\32\32\35\32\109\97\114\107\32\99\97\108\108\32\114\101\115\117\108\116\32\116\111\32\98\101\32\99\108\111\115\101\100\10\32\32\32\32\116\111\99\108\111\115\101\32\45\49\32\32\35\32\109\97\114\107\32\110\105\108\32\116\111\32\98\101\32\99\108\111\115\101\100\32\40\119\105\108\108\32\98\101\32\105\103\110\111\114\101\100\41\10\32\32\32\32\114\101\116\117\114\110\32\50\10\32\32",newresource)
assert(a[1] == 11 and b == nil)
assert(# openresource == 0)
local a = {T.testC("\32\32\32\32\99\97\108\108\32\48\32\49\32\32\32\35\32\99\114\101\97\116\101\32\114\101\115\111\117\114\99\101\10\32\32\32\32\116\111\99\108\111\115\101\32\50\32\35\32\109\97\114\107\32\105\116\32\116\111\32\98\101\32\99\108\111\115\101\100\10\32\32\32\32\114\101\116\117\114\110\32\50\10\32\32",newresource)}
assert(type(a[1]) == "\115\116\114\105\110\103" and a[2][1] == 11)
assert(# openresource == 0)
local a,b = pcall(T.makeCfunc("\32\32\32\32\99\97\108\108\32\48\32\49\32\32\32\35\32\99\114\101\97\116\101\32\114\101\115\111\117\114\99\101\10\32\32\32\32\116\111\99\108\111\115\101\32\45\49\32\35\32\109\97\114\107\32\105\116\32\116\111\32\98\101\32\99\108\111\115\101\100\10\32\32\32\32\101\114\114\111\114\32\32\32\32\32\32\32\35\32\114\101\115\111\117\114\99\101\32\105\115\32\116\104\101\32\101\114\114\111\114\32\111\98\106\101\99\116\10\32\32"),newresource)
assert(a == false and b[1] == 11)
assert(# openresource == 0)
local a,b = pcall(T.makeCfunc("\32\32\32\32\110\101\119\116\97\98\108\101\32\32\32\35\32\99\114\101\97\116\101\32\110\111\110\45\99\108\111\115\97\98\108\101\32\111\98\106\101\99\116\10\32\32\32\32\116\111\99\108\111\115\101\32\45\49\32\35\32\109\97\114\107\32\105\116\32\116\111\32\98\101\32\99\108\111\115\101\100\32\40\115\104\111\117\108\100\32\114\97\105\115\101\32\97\110\32\101\114\114\111\114\41\10\32\32\32\32\97\98\111\114\116\32\32\35\32\119\105\108\108\32\110\111\116\32\98\101\32\101\120\101\99\117\116\101\100\10\32\32"))
assert(a == false and string.find(b,"\110\111\110\37\45\99\108\111\115\97\98\108\101\32\118\97\108\117\101"))
local function check
(n)
assert(# openresource == n)
end
_ENV.xxx=true
local a = T.testnewresource,check)
assert(a == 3 and _ENV.xxx == nil)
local a = T.testnewresource,check)
assert(a == 3)
local a,b = pcall(T.makeCfunc("\32\32\32\32\112\117\115\104\105\110\116\32\51\50\10\32\32\32\32\116\111\99\108\111\115\101\32\45\49\10\32\32"))
assert(not a and string.find(b,"\40\67\32\116\101\109\112\111\114\97\114\121\41"))
end
print("\109\101\109\111\114\121\45\97\108\108\111\99\97\116\105\111\110\32\101\114\114\111\114\115")
checkerr("\98\108\111\99\107\32\116\111\111\32\98\105\103",T.newuserdata,math.maxinteger)
collectgarbage()
local f = load("\108\111\99\97\108\32\97\61\123\125\59\32\102\111\114\32\105\61\49\44\49\48\48\48\48\48\32\100\111\32\97\91\105\93\61\105\32\101\110\100")
T.alloccount(10)
checkerr(MEMERRMSG,f)
T.alloccount()
local function testbytes
(s,f)
collectgarbage()
local M = T.totalmem()
local oldM = M
local a,b = nil
while true do
collectgarbage()
;
collectgarbage()
T.totalmem(M)
a,b=T.testC("\112\99\97\108\108\32\48\32\49\32\48\59\32\112\117\115\104\115\116\97\116\117\115\59\32\114\101\116\117\114\110\32\50",f)
T.totalmem(0)
if a and b == "\79\75" then
break
end
if b ~= "\79\75" and b ~= MEMERRMSG then
error(a,0)
end
M=M + 7
end
print(string.format("\109\105\110\105\109\117\109\32\109\101\109\111\114\121\32\102\111\114\32\37\115\58\32\37\100\32\98\121\116\101\115",s,M - oldM))
return a
end
local function testalloc
(s,f)
collectgarbage()
local M = 0
local a,b = nil
while true do
collectgarbage()
;
collectgarbage()
T.alloccount(M)
a,b=T.testC("\112\99\97\108\108\32\48\32\49\32\48\59\32\112\117\115\104\115\116\97\116\117\115\59\32\114\101\116\117\114\110\32\50",f)
T.alloccount()
if a and b == "\79\75" then
break
end
if b ~= "\79\75" and b ~= MEMERRMSG then
error(a,0)
end
M=M + 1
end
print(string.format("\109\105\110\105\109\117\109\32\97\108\108\111\99\97\116\105\111\110\115\32\102\111\114\32\37\115\58\32\37\100\32\97\108\108\111\99\97\116\105\111\110\115",s,M))
return a
end
local function testamem
(s,f)
testalloc(s,f)
return testbytes(s,f)
end
b=testamem("\100\111\105\110\103\32\110\111\116\104\105\110\103",function ()
return 10
end)
assert(b == 10)
testamem("\115\116\97\116\101\32\99\114\101\97\116\105\111\110",function ()
local st = T.newstate()
if st then
T.closestate(st)
end
return st
end)
testamem("\101\109\112\116\121\45\116\97\98\108\101\32\99\114\101\97\116\105\111\110",function ()
return {}
end)
testamem("\115\116\114\105\110\103\32\99\114\101\97\116\105\111\110",function ()
return "\88\88\88" .. "\89\89\89"
end)
testamem("\99\111\114\111\117\116\105\110\101\32\99\114\101\97\116\105\111\110",function ()
return coroutine.create(print)
end)
testamem("\116\111\45\98\101\45\99\108\111\115\101\100\32\118\97\114\105\97\98\108\101\115",function ()
local flag
do
local x <close> = setmetatable({},{["\95\95\99\108\111\115\101"] = function ()
flag=true
end})
flag=false
local x = {}
end
return flag
end)
local mt = T.testC("\114\97\119\103\101\116\105\32\82\32\49\59\32\114\101\116\117\114\110\32\49")
assert(type(mt) == "\116\104\114\101\97\100" and coroutine.running() == mt)
local function expand
(n,s)
if n == 0 then
return ""
end
local e = string.rep("\61",n)
return string.format("\84\46\100\111\111\110\110\101\119\115\116\97\99\107\40\91\37\115\91\32\37\115\59\10\32\99\111\108\108\101\99\116\103\97\114\98\97\103\101\40\41\59\32\37\115\93\37\115\93\41\10",e,s,expand(n - 1,s),e)
end
G=0
;
collectgarbage()
;
a=collectgarbage("\99\111\117\110\116")
load(expand(20,"\71\61\71\43\49"))()
assert(G == 20)
;
collectgarbage()
;
G=nil
testamem("\114\117\110\110\105\110\103\32\99\111\100\101\32\111\110\32\110\101\119\32\116\104\114\101\97\100",function ()
return T.doonnewstack("\108\111\99\97\108\32\120\61\49") == 0
end)
testamem("\108\111\97\100\115\116\114\105\110\103",function ()
return load("\120\61\49")
end)
local testprog = "\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\102\111\111\32\40\41\32\114\101\116\117\114\110\32\101\110\100\10\108\111\99\97\108\32\116\32\61\32\123\34\120\34\125\10\65\65\32\61\32\34\97\97\97\34\10\102\111\114\32\105\32\61\32\49\44\32\35\116\32\100\111\32\65\65\32\61\32\65\65\32\46\46\32\116\91\105\93\32\101\110\100\10\114\101\116\117\114\110\32\116\114\117\101\10"
_G.AA=nil
local t = os.tmpname()
local f = assert(io.open(t,"\119"))
f:write(testprog)
f:close()
testamem("\100\111\102\105\108\101",function ()
local a = loadfile(t)
return a and a()
end)
assert(os.remove(t))
assert(_G.AA == "\97\97\97\120")
testamem("\103\115\117\98",function ()
local a,b = string.gsub("\97\108\111\32\97\108\111","\40\97\41",function (x)
return x .. "\98"
end)
return (a == "\97\98\108\111\32\97\98\108\111")
end)
testamem("\100\117\109\112\47\117\110\100\117\109\112",function ()
local a = load(testprog)
local b = a and string.dump(a)
a=b and load(b)
return a and a()
end)
_G.AA=nil
local t = os.tmpname()
testamem("\102\105\108\101\32\99\114\101\97\116\105\111\110",function ()
local f = assert(io.open(t,"\119"))
assert(not io.open("\110\111\109\101\110\97\111\101\120\105\115\116\101\110\116\101"))
io.close(f)
;
return not loadfile("\110\111\109\101\110\97\111\101\120\105\115\116\101\110\116\101")
end)
assert(os.remove(t))
testamem("\116\97\98\108\101\32\99\114\101\97\116\105\111\110",function ()
local a,lim = {},10
for i = 1, lim
do
a[i]=i
;
a[i .. "\97"]={}
end
return (type(a[lim .. "\97"]) == "\116\97\98\108\101" and a[lim] == lim)
end)
testamem("\99\111\110\115\116\114\117\99\116\111\114\115",function ()
local a = {10,20,30,40,50,["\97"] = 1,["\98"] = 2,["\99"] = 3,["\100"] = 4,["\101"] = 5}
return (type(a) == "\116\97\98\108\101" and a.e == 5)
end)
local a = 1
local close = nil
testamem("\99\108\111\115\117\114\101\32\99\114\101\97\116\105\111\110",function ()
function close(b)
return function (x)
return b + x
end
end
return (close(2)(4) == 6)
end)
testamem("\117\115\105\110\103\32\99\111\114\111\117\116\105\110\101\115",function ()
local a = coroutine.wrap(function ()
coroutine.yield(string.rep("\97",10))
return {}
end)
assert(string.len(a()) == 10)
return a()
end)
do
local lim = 100
local a = {}
;
for i = 1, lim
do
a[i]="\48\49\50\51\52\53\54\55\56\57\48\49\50\51\52\53\54\55\56\57"
end
testamem("\97\117\120\105\108\105\97\114\121\32\98\117\102\102\101\114",function ()
return (# table.concat(a,"\44") == 20 * lim + lim - 1)
end)
end
testamem("\103\114\111\119\105\110\103\32\115\116\97\99\107",function ()
local function foo
(n)
if n == 0 then
return 1
else
return 1 + foo(n - 1)
end
end
return foo(100)
end)
do
local res = T.testC("\114\97\119\99\104\101\99\107\115\116\97\99\107\32\53\48\48\48\48\48\59\32\114\101\116\117\114\110\32\49")
assert(res == false)
local L = T.newstate()
T.alloccount(0)
res=T.testC(L,"\114\97\119\99\104\101\99\107\115\116\97\99\107\32\53\48\48\48\59\32\114\101\116\117\114\110\32\49")
T.alloccount()
T.closestate(L)
assert(res == false)
end
do
local L = T.newstate()
T.alloccount(0)
T.closestate(L)
T.alloccount()
end
do
local L = T.newstate()
T.loadlib(L)
local res = (T.doremote(L,"\32\32\32\32\95\69\78\86\32\61\32\114\101\113\117\105\114\101\34\95\71\34\10\32\32\32\32\108\111\99\97\108\32\84\32\61\32\114\101\113\117\105\114\101\34\84\34\10\32\32\32\32\108\111\99\97\108\32\97\32\61\32\123\125\10\32\32\32\32\102\111\114\32\105\32\61\32\49\44\32\49\48\48\48\32\100\111\32\97\91\105\93\32\61\32\39\105\39\32\46\46\32\105\32\101\110\100\32\32\32\32\45\45\32\103\114\111\119\32\115\116\114\105\110\103\32\116\97\98\108\101\10\32\32\32\32\108\111\99\97\108\32\115\116\115\105\122\101\44\32\115\116\117\115\101\32\61\32\84\46\113\117\101\114\121\115\116\114\40\41\10\32\32\32\32\97\115\115\101\114\116\40\115\116\117\115\101\32\62\32\49\48\48\48\41\10\32\32\32\32\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\102\111\111\32\40\110\41\10\32\32\32\32\32\32\105\102\32\110\32\62\32\48\32\116\104\101\110\32\102\111\111\40\110\32\45\32\49\41\32\101\110\100\10\32\32\32\32\101\110\100\10\32\32\32\32\102\111\111\40\49\56\48\41\32\32\32\32\45\45\32\103\114\111\119\32\115\116\97\99\107\10\32\32\32\32\108\111\99\97\108\32\95\44\32\115\116\107\115\105\122\101\32\61\32\84\46\115\116\97\99\107\108\101\118\101\108\40\41\10\32\32\32\32\97\115\115\101\114\116\40\115\116\107\115\105\122\101\32\62\32\49\56\48\41\10\32\32\32\32\97\32\61\32\110\105\108\10\32\32\32\32\84\46\97\108\108\111\99\99\111\117\110\116\40\48\41\10\32\32\32\32\99\111\108\108\101\99\116\103\97\114\98\97\103\101\40\41\10\32\32\32\32\84\46\97\108\108\111\99\99\111\117\110\116\40\41\10\32\32\32\32\45\45\32\115\116\97\99\107\32\97\110\100\32\115\116\114\105\110\103\32\116\97\98\108\101\32\99\111\117\108\100\32\110\111\116\32\98\101\32\114\101\97\108\108\111\99\97\116\101\100\44\10\32\32\32\32\45\45\32\115\111\32\116\104\101\121\32\107\101\112\116\32\116\104\101\105\114\32\115\105\122\101\115\32\40\119\105\116\104\111\117\116\32\101\114\114\111\114\115\41\10\32\32\32\32\97\115\115\101\114\116\40\115\101\108\101\99\116\40\50\44\32\84\46\115\116\97\99\107\108\101\118\101\108\40\41\41\32\61\61\32\115\116\107\115\105\122\101\41\10\32\32\32\32\97\115\115\101\114\116\40\84\46\113\117\101\114\121\115\116\114\40\41\32\61\61\32\115\116\115\105\122\101\41\10\32\32\32\32\114\101\116\117\114\110\32\39\111\107\39\10\32\32"))
assert(res == "\111\107")
T.closestate(L)
end
print("\43")
local function gsub
(a,b,c)
a,b=T.testC("\103\115\117\98\32\50\32\51\32\52\59\32\103\101\116\116\111\112\59\32\114\101\116\117\114\110\32\50",a,b,c)
assert(b == 5)
return a
end
assert(gsub("\97\108\111\46\97\108\111\46\117\104\117\104\46","\46","\47\47") == "\97\108\111\47\47\97\108\111\47\47\117\104\117\104\47\47")
assert(gsub("\97\108\111\46\97\108\111\46\117\104\117\104\46","\97\108\111","\47\47") == "\47\47\46\47\47\46\117\104\117\104\46")
assert(gsub("","\97\108\111","\47\47") == "")
assert(gsub("\46\46\46","\46","\47\46") == "\47\46\47\46\47\46")
assert(gsub("\46\46\46","\46\46\46","") == "")
local mt_xuxu,res,top = T.testC("\110\101\119\109\101\116\97\116\97\98\108\101\32\120\117\120\117\59\32\103\101\116\116\111\112\59\32\114\101\116\117\114\110\32\51")
assert(type(mt_xuxu) == "\116\97\98\108\101" and res and top == 3)
local d,res,top = T.testC("\110\101\119\109\101\116\97\116\97\98\108\101\32\120\117\120\117\59\32\103\101\116\116\111\112\59\32\114\101\116\117\114\110\32\51")
assert(mt_xuxu == d and not res and top == 3)
d,res,top=T.testC("\110\101\119\109\101\116\97\116\97\98\108\101\32\120\117\120\117\49\59\32\103\101\116\116\111\112\59\32\114\101\116\117\114\110\32\51")
assert(mt_xuxu ~= d and res and top == 3)
x=T.newuserdata(0)
;
y=T.newuserdata(0)
;
T.testC("\112\117\115\104\115\116\114\105\110\103\32\120\117\120\117\59\32\103\101\116\116\97\98\108\101\32\82\59\32\115\101\116\109\101\116\97\116\97\98\108\101\32\50",x)
assert(getmetatable(x) == mt_xuxu)
local res1,res2,top = T.testC("\116\101\115\116\117\100\97\116\97\32\45\49\32\120\117\120\117\10\32\32\32\9\32\9\9\9\32\32\116\101\115\116\117\100\97\116\97\32\50\32\120\117\120\117\10\9\9\9\9\32\32\103\101\116\116\111\112\10\9\9\9\9\32\32\114\101\116\117\114\110\32\51",x)
assert(res1 and res2 and top == 4)
res1,res2,top=T.testC("\116\101\115\116\117\100\97\116\97\32\45\49\32\120\117\120\117\49\10\9\9\9\32\32\32\32\116\101\115\116\117\100\97\116\97\32\50\32\120\117\120\117\49\10\9\9\9\32\32\32\32\103\101\116\116\111\112\10\9\9\9\32\32\32\32\114\101\116\117\114\110\32\51",x)
assert(not res1 and not res2 and top == 4)
res1,res2,top=T.testC("\116\101\115\116\117\100\97\116\97\32\45\49\32\120\117\120\117\50\10\9\9\9\32\32\32\32\116\101\115\116\117\100\97\116\97\32\50\32\120\117\120\117\50\10\9\9\9\32\32\32\32\103\101\116\116\111\112\10\9\9\9\32\32\32\32\114\101\116\117\114\110\32\51",x)
assert(not res1 and not res2 and top == 4)
res1,res2,top=T.testC("\116\101\115\116\117\100\97\116\97\32\45\49\32\120\117\120\117\10\9\9\9\32\32\32\32\116\101\115\116\117\100\97\116\97\32\50\32\120\117\120\117\10\9\9\9\32\32\32\32\103\101\116\116\111\112\10\9\9\9\32\32\32\32\114\101\116\117\114\110\32\51",y)
assert(not res1 and not res2 and top == 4)
do
local r = debug.getregistry()
assert(r.xuxu == mt_xuxu and r.xuxu1 == d)
r.xuxu=nil
;
r.xuxu1=nil
end
print("\79\75")