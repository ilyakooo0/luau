local pack = string.pack
local packsize = string.packsize
local unpack = string.unpack
print("\116\101\115\116\105\110\103\32\112\97\99\107\47\117\110\112\97\99\107")
local NB = 16
local sizeshort = packsize("\104")
local sizeint = packsize("\105")
local sizelong = packsize("\108")
local sizesize_t = packsize("\84")
local sizeLI = packsize("\106")
local sizefloat = packsize("\102")
local sizedouble = packsize("\100")
local sizenumber = packsize("\110")
local little = (pack("\105\50",1) == "\1")
local align = packsize("\33\120\88\105\49\54")
assert(1 <= sizeshort and sizeshort <= sizeint and sizeint <= sizelong and sizefloat <= sizedouble)
print("\112\108\97\116\102\111\114\109\58")
print(string.format("\9\115\104\111\114\116\32\37\100\44\32\105\110\116\32\37\100\44\32\108\111\110\103\32\37\100\44\32\115\105\122\101\95\116\32\37\100\44\32\102\108\111\97\116\32\37\100\44\32\100\111\117\98\108\101\32\37\100\44\10\9\108\117\97\32\73\110\116\101\103\101\114\32\37\100\44\32\108\117\97\32\78\117\109\98\101\114\32\37\100",sizeshort,sizeint,sizelong,sizesize_t,sizefloat,sizedouble,sizeLI,sizenumber))
print("\9" .. (little and "\108\105\116\116\108\101" or "\98\105\103") .. "\32\101\110\100\105\97\110")
print("\9\97\108\105\103\110\109\101\110\116\58\32" .. align)
local function checkerror
(msg,f, ...)
local status,err = pcall(f,...)
assert(not status and string.find(err,msg))
end
assert(unpack("\66",pack("\66",255)) == 255)
assert(unpack("\98",pack("\98",127)) == 127)
assert(unpack("\98",pack("\98",- 128)) == - 128)
assert(unpack("\72",pack("\72",65535)) == 65535)
assert(unpack("\104",pack("\104",32767)) == 32767)
assert(unpack("\104",pack("\104",- 32768)) == - 32768)
assert(unpack("\76",pack("\76",4294967295)) == 4294967295)
assert(unpack("\108",pack("\108",2147483647)) == 2147483647)
assert(unpack("\108",pack("\108",- 2147483648)) == - 2147483648)
for i = 1, NB
do
local s = string.rep("\255",i)
assert(pack("\105" .. i,- 1) == s)
assert(packsize("\105" .. i) == # s)
assert(unpack("\105" .. i,s) == - 1)
s="\170" .. string.rep("",i - 1)
assert(pack("\60\73" .. i,170) == s)
assert(unpack("\60\73" .. i,s) == 170)
assert(pack("\62\73" .. i,170) == s:reverse())
assert(unpack("\62\73" .. i,s:reverse()) == 170)
end
do
local lnum = 1510926445411202934483812811265
local s = pack("\60\106",lnum)
assert(unpack("\60\106",s) == lnum)
assert(unpack("\60\105" .. sizeLI + 1,s .. "") == lnum)
assert(unpack("\60\105" .. sizeLI + 1,s .. "") == lnum)
for i = sizeLI + 1, NB
do
local s = pack("\60\106",- lnum)
assert(unpack("\60\106",s) == - lnum)
assert(unpack("\60\105" .. i,s .. ("\255"):rep(i - sizeLI)) == - lnum)
assert(unpack("\62\105" .. i,("\255"):rep(i - sizeLI) .. s:reverse()) == - lnum)
assert(unpack("\60\73" .. i,s .. (""):rep(i - sizeLI)) == - lnum)
checkerror("\100\111\101\115\32\110\111\116\32\102\105\116",unpack,"\60\73" .. i,(""):rep(i - 1) .. "\1")
checkerror("\100\111\101\115\32\110\111\116\32\102\105\116",unpack,"\62\105" .. i,"\1" .. (""):rep(i - 1))
end
end
for i = 1, sizeLI
do
local lstr = "\1\2\3\4\5\6\7\8\9\10\11\12\13"
local lnum = 1510926445411202934483812811265
local n = lnum & (~ (- 1 << (i * 8)))
local s = string.sub(lstr,1,i)
assert(pack("\60\105" .. i,n) == s)
assert(pack("\62\105" .. i,n) == s:reverse())
assert(unpack("\62\105" .. i,s:reverse()) == n)
end
do
local u = 240
for i = 1, sizeLI - 1
do
assert(unpack("\60\105" .. i,"\240" .. ("\255"):rep(i - 1)) == - 16)
assert(unpack("\62\73" .. i,"\240" .. ("\255"):rep(i - 1)) == u)
u=u * 256 + 255
end
end
do
assert(pack("\62\105\50\32\60\105\50",10,20) == "\10\20")
local a,b = unpack("\60\105\50\32\62\105\50","\10\20")
assert(a == 10 and b == 20)
assert(pack("\61\105\52",2001) == pack("\105\52",2001))
end
print("\116\101\115\116\105\110\103\32\105\110\118\97\108\105\100\32\102\111\114\109\97\116\115")
checkerror("\111\117\116\32\111\102\32\108\105\109\105\116\115",pack,"\105\48",0)
checkerror("\111\117\116\32\111\102\32\108\105\109\105\116\115",pack,"\105" .. NB + 1,0)
checkerror("\111\117\116\32\111\102\32\108\105\109\105\116\115",pack,"\33" .. NB + 1,0)
checkerror("\37\40\49\55\37\41\32\111\117\116\32\111\102\32\108\105\109\105\116\115\32\37\91\49\44\49\54\37\93",pack,"\88\105" .. NB + 1)
checkerror("\105\110\118\97\108\105\100\32\102\111\114\109\97\116\32\111\112\116\105\111\110\32\39\114\39",pack,"\105\51\114",0)
checkerror("\49\54\37\45\98\121\116\101\32\105\110\116\101\103\101\114",unpack,"\105\49\54",string.rep("\3",16))
checkerror("\110\111\116\32\112\111\119\101\114\32\111\102\32\50",pack,"\33\52\105\51",0)
;
checkerror("\109\105\115\115\105\110\103\32\115\105\122\101",pack,"\99","")
checkerror("\118\97\114\105\97\98\108\101\37\45\108\101\110\103\116\104\32\102\111\114\109\97\116",packsize,"\115")
checkerror("\118\97\114\105\97\98\108\101\37\45\108\101\110\103\116\104\32\102\111\114\109\97\116",packsize,"\122")
checkerror("\105\110\118\97\108\105\100\32\102\111\114\109\97\116",packsize,"\99\49" .. string.rep("\48",40))
if packsize("\105") == 4 then
local s = string.rep("\99\50\54\56\52\51\53\52\53\54",2 ^ 3)
checkerror("\116\111\111\32\108\97\114\103\101",packsize,s)
s=string.rep("\99\50\54\56\52\51\53\52\53\54",2 ^ 3 - 1) .. "\99\50\54\56\52\51\53\52\53\53"
assert(packsize(s) == 2147483647)
end
for i = 1, sizeLI - 1
do
local umax = (1 << (i * 8)) - 1
local max = umax >> 1
local min = ~ max
checkerror("\111\118\101\114\102\108\111\119",pack,"\60\73" .. i,- 1)
checkerror("\111\118\101\114\102\108\111\119",pack,"\60\73" .. i,min)
checkerror("\111\118\101\114\102\108\111\119",pack,"\62\73" .. i,umax + 1)
checkerror("\111\118\101\114\102\108\111\119",pack,"\62\105" .. i,umax)
checkerror("\111\118\101\114\102\108\111\119",pack,"\62\105" .. i,max + 1)
checkerror("\111\118\101\114\102\108\111\119",pack,"\60\105" .. i,min - 1)
assert(unpack("\62\105" .. i,pack("\62\105" .. i,max)) == max)
assert(unpack("\60\105" .. i,pack("\60\105" .. i,min)) == min)
assert(unpack("\62\73" .. i,pack("\62\73" .. i,umax)) == umax)
end
assert(unpack("\62\106",pack("\62\106",math.maxinteger)) == math.maxinteger)
assert(unpack("\60\106",pack("\60\106",math.mininteger)) == math.mininteger)
assert(unpack("\60\74",pack("\60\106",- 1)) == - 1)
if little then
assert(pack("\102",24) == pack("\60\102",24))
else
assert(pack("\102",24) == pack("\62\102",24))
end
print("\116\101\115\116\105\110\103\32\112\97\99\107\47\117\110\112\97\99\107\32\111\102\32\102\108\111\97\116\105\110\103\45\112\111\105\110\116\32\110\117\109\98\101\114\115")
for _,n in ipairs({0,- 1.1,1.9,1 / 0,- 1 / 0,1e20,- 1e20,0.1,2000.7})
do
assert(unpack("\110",pack("\110",n)) == n)
assert(unpack("\60\110",pack("\60\110",n)) == n)
assert(unpack("\62\110",pack("\62\110",n)) == n)
assert(pack("\60\102",n) == pack("\62\102",n):reverse())
assert(pack("\62\100",n) == pack("\60\100",n):reverse())
end
for _,n in ipairs({0,- 1.5,1 / 0,- 1 / 0,1e10,- 1e9,0.5,2000.25})
do
assert(unpack("\60\102",pack("\60\102",n)) == n)
assert(unpack("\62\102",pack("\62\102",n)) == n)
assert(unpack("\60\100",pack("\60\100",n)) == n)
assert(unpack("\62\100",pack("\62\100",n)) == n)
end
print("\116\101\115\116\105\110\103\32\112\97\99\107\47\117\110\112\97\99\107\32\111\102\32\115\116\114\105\110\103\115")
do
local s = string.rep("\97\98\99",1000)
assert(pack("\122\66",s,247) == s .. "\247")
local s1,b = unpack("\122\66",s .. "\249")
assert(b == 249 and s1 == s)
s1=pack("\115",s)
assert(unpack("\115",s1) == s)
checkerror("\100\111\101\115\32\110\111\116\32\102\105\116",pack,"\115\49",s)
checkerror("\99\111\110\116\97\105\110\115\32\122\101\114\111\115",pack,"\122","\97\108\111")
;
checkerror("\117\110\102\105\110\105\115\104\101\100\32\115\116\114\105\110\103",unpack,"\122\99\49\48\48\48\48\48\48\48","\97\108\111")
for i = 2, NB
do
local s1 = pack("\115" .. i,s)
assert(unpack("\115" .. i,s1) == s and # s1 == # s + i)
end
end
do
local x = pack("\115","\97\108\111")
checkerror("\116\111\111\32\115\104\111\114\116",unpack,"\115",x:sub(1,- 2))
checkerror("\116\111\111\32\115\104\111\114\116",unpack,"\99\53","\97\98\99\100")
checkerror("\111\117\116\32\111\102\32\108\105\109\105\116\115",pack,"\115\49\48\48","\97\108\111")
end
do
assert(pack("\99\48","") == "")
assert(packsize("\99\48") == 0)
assert(unpack("\99\48","") == "")
assert(pack("\60\33\32\99\51","\97\98\99") == "\97\98\99")
assert(packsize("\60\33\32\99\51") == 3)
assert(pack("\62\33\52\32\99\54","\97\98\99\100\101\102") == "\97\98\99\100\101\102")
assert(pack("\99\51","\49\50\51") == "\49\50\51")
assert(pack("\99\48","") == "")
assert(pack("\99\56","\49\50\51\52\53\54") == "\49\50\51\52\53\54")
assert(pack("\99\56\56","") == string.rep("",88))
assert(pack("\99\49\56\56","\97\98") == "\97\98" .. string.rep("",188 - 2))
local a,b,c = unpack("\33\52\32\122\32\99\51","\97\98\99\100\101\102\103\104\105\120\121\122")
assert(a == "\97\98\99\100\101\102\103\104\105" and b == "\120\121\122" and c == 14)
checkerror("\108\111\110\103\101\114\32\116\104\97\110",pack,"\99\51","\49\50\51\52")
end
do
local x = pack("\60\98\32\104\32\98\32\102\32\100\32\102\32\110\32\105",1,2,3,4,5,6,7,8)
assert(# x == packsize("\60\98\32\104\32\98\32\102\32\100\32\102\32\110\32\105"))
local a,b,c,d,e,f,g,h = unpack("\60\98\32\104\32\98\32\102\32\100\32\102\32\110\32\105",x)
assert(a == 1 and b == 2 and c == 3 and d == 4 and e == 5 and f == 6 and g == 7 and h == 8)
end
print("\116\101\115\116\105\110\103\32\97\108\105\103\110\109\101\110\116")
do
assert(pack("\32\60\32\105\49\32\105\50\32",2,3) == "\2\3")
local x = pack("\62\33\56\32\98\32\88\104\32\105\52\32\105\56\32\99\49\32\88\105\56",- 12,100,200,"\236")
assert(# x == packsize("\62\33\56\32\98\32\88\104\32\105\52\32\105\56\32\99\49\32\88\105\56"))
assert(x == "\244" .. "" .. "\100" .. "\200" .. "\236" .. "")
local a,b,c,d,pos = unpack("\62\33\56\32\99\49\32\88\104\32\105\52\32\105\56\32\98\32\88\105\56\32\88\73\32\88\72",x)
assert(a == "\244" and b == 100 and c == 200 and d == - 20 and (pos - 1) == # x)
x=pack("\62\33\52\32\99\51\32\99\52\32\99\50\32\122\32\105\52\32\99\53\32\99\50\32\88\105\52","\97\98\99","\97\98\99\100","\120\122","\104\101\108\108\111",5,"\119\111\114\108\100","\120\121")
assert(x == "\97\98\99\97\98\99\100\120\122\104\101\108\108\111\5\119\111\114\108\100\120\121")
local a,b,c,d,e,f,g,pos = unpack("\62\33\52\32\99\51\32\99\52\32\99\50\32\122\32\105\52\32\99\53\32\99\50\32\88\104\32\88\105\52",x)
assert(a == "\97\98\99" and b == "\97\98\99\100" and c == "\120\122" and d == "\104\101\108\108\111" and e == 5 and f == "\119\111\114\108\100" and g == "\120\121" and (pos - 1) % 4 == 0)
x=pack("\32\98\32\98\32\88\100\32\98\32\88\98\32\120",1,2,3)
assert(packsize("\32\98\32\98\32\88\100\32\98\32\88\98\32\120") == 4)
assert(x == "\1\2\3")
a,b,c,pos=unpack("\98\98\88\100\98",x)
assert(a == 1 and b == 2 and c == 3 and pos == # x)
assert(packsize("\33\56\32\120\88\105\56") == 8)
local pos = unpack("\33\56\32\120\88\105\56","\48\49\50\51\52\53\54\55\48\49\50\51\52\53\54\55")
;
assert(pos == 9)
assert(packsize("\33\56\32\120\88\105\50") == 2)
local pos = unpack("\33\56\32\120\88\105\50","\48\49\50\51\52\53\54\55\48\49\50\51\52\53\54\55")
;
assert(pos == 3)
assert(packsize("\33\50\32\120\88\105\50") == 2)
local pos = unpack("\33\50\32\120\88\105\50","\48\49\50\51\52\53\54\55\48\49\50\51\52\53\54\55")
;
assert(pos == 3)
assert(packsize("\33\50\32\120\88\105\56") == 2)
local pos = unpack("\33\50\32\120\88\105\56","\48\49\50\51\52\53\54\55\48\49\50\51\52\53\54\55")
;
assert(pos == 3)
assert(packsize("\33\49\54\32\120\88\105\49\54") == 16)
local pos = unpack("\33\49\54\32\120\88\105\49\54","\48\49\50\51\52\53\54\55\48\49\50\51\52\53\54\55")
;
assert(pos == 17)
checkerror("\105\110\118\97\108\105\100\32\110\101\120\116\32\111\112\116\105\111\110",pack,"\88")
checkerror("\105\110\118\97\108\105\100\32\110\101\120\116\32\111\112\116\105\111\110",unpack,"\88\88\105","")
checkerror("\105\110\118\97\108\105\100\32\110\101\120\116\32\111\112\116\105\111\110",unpack,"\88\32\105","")
checkerror("\105\110\118\97\108\105\100\32\110\101\120\116\32\111\112\116\105\111\110",pack,"\88\99\49")
end
do
local x = pack("\105\52\105\52\105\52\105\52",1,2,3,4)
for pos = 1, 16, 4
do
local i,p = unpack("\105\52",x,pos)
assert(i == pos // 4 + 1 and p == pos + 4)
end
for pos = 0, 12
do
local i,p = unpack("\33\52\32\105\52",x,pos + 1)
assert(i == (pos + 3) // 4 + 1 and p == i * 4 + 1)
end
local i,p = unpack("\33\52\32\105\52",x,- 4)
assert(i == 4 and p == 17)
local i,p = unpack("\33\52\32\105\52",x,- 7)
assert(i == 4 and p == 17)
local i,p = unpack("\33\52\32\105\52",x,- # x)
assert(i == 1 and p == 5)
for i = 1, # x + 1
do
assert(unpack("\99\48",x,i) == "")
end
checkerror("\111\117\116\32\111\102\32\115\116\114\105\110\103",unpack,"\99\48",x,# x + 2)
end
print("\79\75")