print("\116\101\115\116\105\110\103\32\101\114\114\111\114\115")
local debug = require("\100\101\98\117\103")
local mt = getmetatable(_G) or {}
local oldmm = mt.__index
mt.__index=nil
local function checkerr
(msg,f, ...)
local st,err = pcall(f,...)
assert(not st and string.find(err,msg))
end
local function doit
(s)
local f,msg = load(s)
if not f then
return msg
end
local cond,msg = pcall(f)
return (not cond) and msg
end
local function checkmessage
(prog,msg,debug)
local m = doit(prog)
if debug then
print(m,msg)
end
assert(string.find(m,msg,1,true))
end
local function checksyntax
(prog,extra,token,line)
local msg = doit(prog)
if not string.find(token,"\94\60\37\97") and not string.find(token,"\94\99\104\97\114\37\40") then
token="\39" .. token .. "\39"
end
token=string.gsub(token,"\40\37\112\41","\37\37\37\49")
local pt = string.format("\94\37\37\91\115\116\114\105\110\103\32\34\46\42\34\37\37\93\58\37\100\58\32\46\45\32\110\101\97\114\32\37\115\36",line,token)
assert(string.find(msg,pt))
assert(string.find(msg,msg,1,true))
end
assert(doit("\101\114\114\111\114\40\39\104\105\39\44\32\48\41") == "\104\105")
assert(doit("\101\114\114\111\114\40\41") == nil)
assert(doit("\116\97\98\108\101\46\117\110\112\97\99\107\40\123\125\44\32\49\44\32\110\61\50\94\51\48\41"))
assert(doit("\97\61\109\97\116\104\46\115\105\110\40\41"))
assert(not doit("\116\111\115\116\114\105\110\103\40\49\41") and doit("\116\111\115\116\114\105\110\103\40\41"))
assert(doit("\116\111\110\117\109\98\101\114\40\41"))
assert(doit("\114\101\112\101\97\116\32\117\110\116\105\108\32\49\59\32\97"))
assert(doit("\114\101\116\117\114\110\59\59"))
assert(doit("\97\115\115\101\114\116\40\102\97\108\115\101\41"))
assert(doit("\97\115\115\101\114\116\40\110\105\108\41"))
assert(doit("\102\117\110\99\116\105\111\110\32\97\32\40\46\46\46\32\44\32\46\46\46\41\32\101\110\100"))
assert(doit("\102\117\110\99\116\105\111\110\32\97\32\40\44\32\46\46\46\41\32\101\110\100"))
assert(doit("\108\111\99\97\108\32\116\61\123\125\59\32\116\32\61\32\116\91\35\116\93\32\43\32\49"))
checksyntax("\32\32\108\111\99\97\108\32\97\32\61\32\123\52\10\10","\39\125\39\32\101\120\112\101\99\116\101\100\32\40\116\111\32\99\108\111\115\101\32\39\123\39\32\97\116\32\108\105\110\101\32\49\41","\60\101\111\102\62",3)
do
local function checksyntax
(prog,msg,line)
local st,err = load(prog)
assert(string.find(err,"\108\105\110\101\32" .. line))
assert(string.find(err,msg,1,true))
end
checksyntax("\32\32\32\32\58\58\65\58\58\32\97\32\61\32\49\10\32\32\32\32\58\58\65\58\58\10\32\32","\108\97\98\101\108\32\39\65\39\32\97\108\114\101\97\100\121\32\100\101\102\105\110\101\100",1)
checksyntax("\32\32\32\32\97\32\61\32\49\10\32\32\32\32\103\111\116\111\32\65\10\32\32\32\32\100\111\32\58\58\65\58\58\32\101\110\100\10\32\32","\110\111\32\118\105\115\105\98\108\101\32\108\97\98\101\108\32\39\65\39",2)
end
if not T then
(Message or print)("\10\32\62\62\62\32\116\101\115\116\67\32\110\111\116\32\97\99\116\105\118\101\58\32\115\107\105\112\112\105\110\103\32\116\101\115\116\115\32\102\111\114\32\109\101\115\115\97\103\101\115\32\105\110\32\67\32\60\60\60\10")
else
print("\116\101\115\116\105\110\103\32\109\101\109\111\114\121\32\101\114\114\111\114\32\109\101\115\115\97\103\101")
local a = {}
for i = 1, 10000
do
a[i]=true
end
collectgarbage()
T.totalmem(T.totalmem() + 10000)
local st,msg = pcall(function ()
for i = 1, 100000
do
a[i]=tostring(i)
end
end)
T.totalmem(0)
assert(not st and msg == "\110\111\116\32\101\110\111\117\103\104" .. "\32\109\101\109\111\114\121")
local res = T.test
assert(string.find(res,"\120\117\120\117\46\45\109\97\105\110\32\99\104\117\110\107"))
end
checkmessage("\97\32\61\32\123\125\32\43\32\49","\97\114\105\116\104\109\101\116\105\99")
checkmessage("\97\32\61\32\123\125\32\124\32\49","\98\105\116\119\105\115\101\32\111\112\101\114\97\116\105\111\110")
checkmessage("\97\32\61\32\123\125\32\60\32\49","\97\116\116\101\109\112\116\32\116\111\32\99\111\109\112\97\114\101")
checkmessage("\97\32\61\32\123\125\32\60\61\32\49","\97\116\116\101\109\112\116\32\116\111\32\99\111\109\112\97\114\101")
checkmessage("\97\97\97\61\49\59\32\98\98\98\98\61\50\59\32\97\97\97\61\109\97\116\104\46\115\105\110\40\51\41\43\98\98\98\98\40\51\41","\103\108\111\98\97\108\32\39\98\98\98\98\39")
checkmessage("\97\97\97\61\123\125\59\32\100\111\32\108\111\99\97\108\32\97\97\97\61\49\32\101\110\100\32\97\97\97\58\98\98\98\98\40\51\41","\109\101\116\104\111\100\32\39\98\98\98\98\39")
checkmessage("\108\111\99\97\108\32\97\61\123\125\59\32\97\46\98\98\98\98\40\51\41","\102\105\101\108\100\32\39\98\98\98\98\39")
assert(not string.find(doit("\97\97\97\61\123\49\51\125\59\32\108\111\99\97\108\32\98\98\98\98\61\49\59\32\97\97\97\91\98\98\98\98\93\40\51\41"),"\39\98\98\98\98\39"))
checkmessage("\97\97\97\61\123\49\51\125\59\32\108\111\99\97\108\32\98\98\98\98\61\49\59\32\97\97\97\91\98\98\98\98\93\40\51\41","\110\117\109\98\101\114")
checkmessage("\97\97\97\61\40\49\41\46\46\123\125","\97\32\116\97\98\108\101\32\118\97\108\117\101")
checkmessage("\97\32\61\32\123\95\69\78\86\32\61\32\123\125\125\59\32\112\114\105\110\116\40\97\46\95\69\78\86\46\120\32\43\32\49\41","\102\105\101\108\100\32\39\120\39")
_G.aaa,_G.bbbb=nil
checkmessage("\108\111\99\97\108\32\97\59\32\97\40\49\51\41","\108\111\99\97\108\32\39\97\39")
checkmessage("\32\32\108\111\99\97\108\32\97\32\61\32\115\101\116\109\101\116\97\116\97\98\108\101\40\123\125\44\32\123\95\95\97\100\100\32\61\32\51\52\125\41\10\32\32\97\32\61\32\97\32\43\32\49\10","\109\101\116\97\109\101\116\104\111\100\32\39\97\100\100\39")
checkmessage("\32\32\108\111\99\97\108\32\97\32\61\32\115\101\116\109\101\116\97\116\97\98\108\101\40\123\125\44\32\123\95\95\108\116\32\61\32\123\125\125\41\10\32\32\97\32\61\32\97\32\62\32\97\10","\109\101\116\97\109\101\116\104\111\100\32\39\108\116\39")
checkmessage("\108\111\99\97\108\32\97\61\123\125\59\32\114\101\116\117\114\110\32\97\46\98\98\98\98\40\51\41","\102\105\101\108\100\32\39\98\98\98\98\39")
checkmessage("\97\97\97\61\123\125\59\32\100\111\32\108\111\99\97\108\32\97\97\97\61\49\32\101\110\100\59\32\114\101\116\117\114\110\32\97\97\97\58\98\98\98\98\40\51\41","\109\101\116\104\111\100\32\39\98\98\98\98\39")
checkmessage("\97\97\97\32\61\32\35\112\114\105\110\116","\108\101\110\103\116\104\32\111\102\32\97\32\102\117\110\99\116\105\111\110\32\118\97\108\117\101")
checkmessage("\97\97\97\32\61\32\35\51","\108\101\110\103\116\104\32\111\102\32\97\32\110\117\109\98\101\114\32\118\97\108\117\101")
_G.aaa=nil
checkmessage("\97\97\97\46\98\98\98\58\100\100\100\40\57\41","\103\108\111\98\97\108\32\39\97\97\97\39")
checkmessage("\108\111\99\97\108\32\97\97\97\61\123\98\98\98\61\49\125\59\32\97\97\97\46\98\98\98\58\100\100\100\40\57\41","\102\105\101\108\100\32\39\98\98\98\39")
checkmessage("\108\111\99\97\108\32\97\97\97\61\123\98\98\98\61\123\125\125\59\32\97\97\97\46\98\98\98\58\100\100\100\40\57\41","\109\101\116\104\111\100\32\39\100\100\100\39")
checkmessage("\108\111\99\97\108\32\97\44\98\44\99\59\32\40\102\117\110\99\116\105\111\110\32\40\41\32\97\32\61\32\98\43\49\46\49\32\101\110\100\41\40\41","\117\112\118\97\108\117\101\32\39\98\39")
assert(not doit("\108\111\99\97\108\32\97\97\97\61\123\98\98\98\61\123\100\100\100\61\110\101\120\116\125\125\59\32\97\97\97\46\98\98\98\58\100\100\100\40\110\105\108\41"))
checkmessage("\108\111\99\97\108\32\97\44\98\44\99\99\59\32\40\102\117\110\99\116\105\111\110\32\40\41\32\97\32\61\32\99\99\91\49\93\32\101\110\100\41\40\41","\117\112\118\97\108\117\101\32\39\99\99\39")
checkmessage("\108\111\99\97\108\32\97\44\98\44\99\99\59\32\40\102\117\110\99\116\105\111\110\32\40\41\32\97\46\120\32\61\32\49\32\101\110\100\41\40\41","\117\112\118\97\108\117\101\32\39\97\39")
checkmessage("\108\111\99\97\108\32\95\69\78\86\32\61\32\123\120\61\123\125\125\59\32\97\32\61\32\97\32\43\32\49","\103\108\111\98\97\108\32\39\97\39")
checkmessage("\66\66\61\49\59\32\108\111\99\97\108\32\97\97\97\61\123\125\59\32\120\61\97\97\97\43\66\66","\108\111\99\97\108\32\39\97\97\97\39")
checkmessage("\97\97\97\61\123\125\59\32\120\61\51\46\51\47\97\97\97","\103\108\111\98\97\108\32\39\97\97\97\39")
checkmessage("\97\97\97\61\50\59\32\66\66\61\110\105\108\59\120\61\97\97\97\42\66\66","\103\108\111\98\97\108\32\39\66\66\39")
checkmessage("\97\97\97\61\123\125\59\32\120\61\45\97\97\97","\103\108\111\98\97\108\32\39\97\97\97\39")
checkmessage("\97\97\97\61\49\59\32\108\111\99\97\108\32\97\97\97\44\98\98\98\98\61\50\44\51\59\32\97\97\97\32\61\32\109\97\116\104\46\115\105\110\40\49\41\32\97\110\100\32\98\98\98\98\40\51\41","\108\111\99\97\108\32\39\98\98\98\98\39")
checkmessage("\97\97\97\61\49\59\32\108\111\99\97\108\32\97\97\97\44\98\98\98\98\61\50\44\51\59\32\97\97\97\32\61\32\98\98\98\98\40\49\41\32\111\114\32\97\97\97\40\51\41","\108\111\99\97\108\32\39\98\98\98\98\39")
checkmessage("\108\111\99\97\108\32\97\44\98\44\99\44\102\32\61\32\49\44\49\44\49\59\32\102\40\40\97\32\97\110\100\32\98\41\32\111\114\32\99\41","\108\111\99\97\108\32\39\102\39")
checkmessage("\108\111\99\97\108\32\97\44\98\44\99\32\61\32\49\44\49\44\49\59\32\40\40\97\32\97\110\100\32\98\41\32\111\114\32\99\41\40\41","\99\97\108\108\32\97\32\110\117\109\98\101\114\32\118\97\108\117\101")
assert(not string.find(doit("\97\97\97\61\123\125\59\32\120\61\40\97\97\97\32\111\114\32\97\97\97\41\43\40\97\97\97\32\97\110\100\32\97\97\97\41"),"\39\97\97\97\39"))
assert(not string.find(doit("\97\97\97\61\123\125\59\32\40\97\97\97\32\111\114\32\97\97\97\41\40\41"),"\39\97\97\97\39"))
checkmessage("\112\114\105\110\116\40\112\114\105\110\116\32\60\32\49\48\41","\102\117\110\99\116\105\111\110\32\119\105\116\104\32\110\117\109\98\101\114")
checkmessage("\112\114\105\110\116\40\112\114\105\110\116\32\60\32\112\114\105\110\116\41","\116\119\111\32\102\117\110\99\116\105\111\110\32\118\97\108\117\101\115")
checkmessage("\112\114\105\110\116\40\39\49\48\39\32\60\32\49\48\41","\115\116\114\105\110\103\32\119\105\116\104\32\110\117\109\98\101\114")
checkmessage("\112\114\105\110\116\40\49\48\32\60\32\39\50\51\39\41","\110\117\109\98\101\114\32\119\105\116\104\32\115\116\114\105\110\103")
checkmessage("\108\111\99\97\108\32\97\32\61\32\50\46\48\94\49\48\48\59\32\120\32\61\32\97\32\60\60\32\50","\108\111\99\97\108\32\97")
checkmessage("\108\111\99\97\108\32\97\32\61\32\49\32\62\62\32\50\46\48\94\49\48\48","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\108\111\99\97\108\32\97\32\61\32\49\48\46\49\32\60\60\32\50\46\48\94\49\48\48","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\108\111\99\97\108\32\97\32\61\32\50\46\48\94\49\48\48\32\38\32\49","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\108\111\99\97\108\32\97\32\61\32\50\46\48\94\49\48\48\32\38\32\49\101\49\48\48","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\108\111\99\97\108\32\97\32\61\32\50\46\48\32\124\32\49\101\52\48","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\108\111\99\97\108\32\97\32\61\32\50\101\49\48\48\32\126\32\49","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\115\116\114\105\110\103\46\115\117\98\40\39\97\39\44\32\50\46\48\94\49\48\48\41","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\115\116\114\105\110\103\46\114\101\112\40\39\97\39\44\32\51\46\51\41","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\114\101\116\117\114\110\32\54\101\52\48\32\38\32\55","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\114\101\116\117\114\110\32\51\52\32\60\60\32\55\101\51\48","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\114\101\116\117\114\110\32\126\45\51\101\52\48","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\114\101\116\117\114\110\32\126\45\51\46\48\48\57","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\114\101\116\117\114\110\32\51\46\48\48\57\32\38\32\49","\104\97\115\32\110\111\32\105\110\116\101\103\101\114\32\114\101\112\114\101\115\101\110\116\97\116\105\111\110")
checkmessage("\114\101\116\117\114\110\32\51\52\32\62\62\32\123\125","\116\97\98\108\101\32\118\97\108\117\101")
checkmessage("\97\97\97\32\61\32\50\52\32\47\47\32\48","\100\105\118\105\100\101\32\98\121\32\122\101\114\111")
checkmessage("\97\97\97\32\61\32\49\32\37\32\48","\39\110\37\48\39")
checkmessage("\108\111\99\97\108\32\97\32\61\32\115\101\116\109\101\116\97\116\97\98\108\101\40\123\125\44\32\123\95\95\105\110\100\101\120\32\61\32\49\48\125\41\46\120","\97\116\116\101\109\112\116\32\116\111\32\105\110\100\101\120\32\97\32\110\117\109\98\101\114\32\118\97\108\117\101")
checkmessage("\102\111\114\32\105\32\61\32\123\125\44\32\49\48\32\100\111\32\101\110\100","\116\97\98\108\101")
checkmessage("\102\111\114\32\105\32\61\32\105\111\46\115\116\100\105\110\44\32\49\48\32\100\111\32\101\110\100","\70\73\76\69")
checkmessage("\102\111\114\32\105\32\61\32\123\125\44\32\49\48\32\100\111\32\101\110\100","\105\110\105\116\105\97\108\32\118\97\108\117\101")
checkmessage("\102\111\114\32\105\32\61\32\49\44\32\39\120\39\44\32\49\48\32\100\111\32\101\110\100","\115\116\114\105\110\103")
checkmessage("\102\111\114\32\105\32\61\32\49\44\32\123\125\44\32\49\48\32\100\111\32\101\110\100","\108\105\109\105\116")
checkmessage("\102\111\114\32\105\32\61\32\49\44\32\123\125\32\100\111\32\101\110\100","\108\105\109\105\116")
checkmessage("\102\111\114\32\105\32\61\32\49\44\32\49\48\44\32\112\114\105\110\116\32\100\111\32\101\110\100","\115\116\101\112")
checkmessage("\102\111\114\32\105\32\61\32\49\44\32\49\48\44\32\112\114\105\110\116\32\100\111\32\101\110\100","\102\117\110\99\116\105\111\110")
_G.D=debug
checkmessage("\32\32\45\45\32\99\114\101\97\116\101\32\108\105\103\104\116\32\117\100\97\116\97\10\32\32\108\111\99\97\108\32\120\32\61\32\68\46\117\112\118\97\108\117\101\105\100\40\102\117\110\99\116\105\111\110\32\40\41\32\114\101\116\117\114\110\32\100\101\98\117\103\32\101\110\100\44\32\49\41\10\32\32\68\46\115\101\116\117\115\101\114\118\97\108\117\101\40\120\44\32\123\125\41\10","\108\105\103\104\116\32\117\115\101\114\100\97\116\97")
_G.D=nil
do
checkmessage("\109\97\116\104\46\115\105\110\40\105\111\46\105\110\112\117\116\40\41\41","\40\110\117\109\98\101\114\32\101\120\112\101\99\116\101\100\44\32\103\111\116\32\70\73\76\69\42\41")
_G.XX=setmetatable({},{["\95\95\110\97\109\101"] = "\77\121\32\84\121\112\101"})
assert(string.find(tostring(XX),"\94\77\121\32\84\121\112\101"))
checkmessage("\105\111\46\105\110\112\117\116\40\88\88\41","\40\70\73\76\69\42\32\101\120\112\101\99\116\101\100\44\32\103\111\116\32\77\121\32\84\121\112\101\41")
checkmessage("\114\101\116\117\114\110\32\88\88\32\43\32\49","\111\110\32\97\32\77\121\32\84\121\112\101\32\118\97\108\117\101")
checkmessage("\114\101\116\117\114\110\32\126\105\111\46\115\116\100\105\110","\111\110\32\97\32\70\73\76\69\42\32\118\97\108\117\101")
checkmessage("\114\101\116\117\114\110\32\88\88\32\60\32\88\88","\116\119\111\32\77\121\32\84\121\112\101\32\118\97\108\117\101\115")
checkmessage("\114\101\116\117\114\110\32\123\125\32\60\32\88\88","\116\97\98\108\101\32\119\105\116\104\32\77\121\32\84\121\112\101")
checkmessage("\114\101\116\117\114\110\32\88\88\32\60\32\105\111\46\115\116\100\105\110","\77\121\32\84\121\112\101\32\119\105\116\104\32\70\73\76\69\42")
_G.XX=nil
if T then
local x = setmetatable({},{["\95\95\110\97\109\101"] = "\84\65\66\76\69"})
assert(T.testC("\76\116\111\108\115\116\114\105\110\103\32\45\49\59\32\114\101\116\117\114\110\32\49",x) == tostring(x))
local a,b = T.testC("\112\117\115\104\105\110\116\32\49\48\59\32\76\116\111\108\115\116\114\105\110\103\32\45\50\59\32\114\101\116\117\114\110\32\50",x)
assert(a == 10 and b == tostring(x))
setmetatable(x,{["\95\95\116\111\115\116\114\105\110\103"] = function (o)
assert(o == x)
return "\65\66\67"
end})
local a,b,c = T.testC("\112\117\115\104\105\110\116\32\49\48\59\32\76\116\111\108\115\116\114\105\110\103\32\45\50\59\32\114\101\116\117\114\110\32\51",x)
assert(a == x and b == 10 and c == "\65\66\67")
end
end
checkmessage("\40\105\111\46\119\114\105\116\101\32\111\114\32\112\114\105\110\116\41\123\125","\105\111\46\119\114\105\116\101")
checkmessage("\40\99\111\108\108\101\99\116\103\97\114\98\97\103\101\32\111\114\32\112\114\105\110\116\41\123\125","\99\111\108\108\101\99\116\103\97\114\98\97\103\101")
do
local f = function (a)
return a + 1
end
f=assert(load(string.dump(f,true)))
assert(f(3) == 4)
checkerr("\94\37\63\58\37\45\49\58",f,{})
f=function ()
local a
;
a={}
;
return a + 2
end
f=assert(load(string.dump(f,true)))
checkerr("\94\37\63\58\37\45\49\58\46\42\116\97\98\108\101\32\118\97\108\117\101",f)
end
local t = {}
for i = 1, 1000
do
t[i]="\97\97\97\32\61\32\120" .. i
end
local s = table.concat(t,"\59\32")
t=nil
checkmessage(s .. "\59\32\97\97\97\32\61\32\98\98\98\32\43\32\49","\103\108\111\98\97\108\32\39\98\98\98\39")
checkmessage("\108\111\99\97\108\32\95\69\78\86\61\95\69\78\86\59" .. s .. "\59\32\97\97\97\32\61\32\98\98\98\32\43\32\49","\103\108\111\98\97\108\32\39\98\98\98\39")
checkmessage(s .. "\59\32\108\111\99\97\108\32\116\32\61\32\123\125\59\32\97\97\97\32\61\32\116\46\98\98\98\32\43\32\49","\102\105\101\108\100\32\39\98\98\98\39")
checkmessage(s .. "\59\32\108\111\99\97\108\32\116\32\61\32\123\125\59\32\116\58\98\98\98\40\41","\109\101\116\104\111\100\32\39\98\98\98\39")
checkmessage("\97\97\97\61\57\10\114\101\112\101\97\116\32\117\110\116\105\108\32\51\61\61\51\10\108\111\99\97\108\32\120\61\109\97\116\104\46\115\105\110\40\109\97\116\104\46\99\111\115\40\51\41\41\10\105\102\32\109\97\116\104\46\115\105\110\40\49\41\32\61\61\32\120\32\116\104\101\110\32\114\101\116\117\114\110\32\109\97\116\104\46\115\105\110\40\49\41\32\101\110\100\32\32\32\45\45\32\116\97\105\108\32\99\97\108\108\10\108\111\99\97\108\32\97\44\98\32\61\32\49\44\32\123\10\32\32\123\120\61\39\97\39\46\46\39\98\39\46\46\39\99\39\44\32\121\61\39\98\39\44\32\122\61\120\125\44\10\32\32\123\49\44\50\44\51\44\52\44\53\125\32\111\114\32\51\43\51\60\61\51\43\51\44\10\32\32\51\43\49\62\51\43\49\44\10\32\32\123\100\32\61\32\120\32\97\110\100\32\97\97\97\91\120\32\111\114\32\121\93\125\125\10","\103\108\111\98\97\108\32\39\97\97\97\39")
checkmessage("\108\111\99\97\108\32\120\44\121\32\61\32\123\125\44\49\10\105\102\32\109\97\116\104\46\115\105\110\40\49\41\32\61\61\32\48\32\116\104\101\110\32\114\101\116\117\114\110\32\51\32\101\110\100\32\32\32\32\45\45\32\114\101\116\117\114\110\10\120\46\97\40\41","\102\105\101\108\100\32\39\97\39")
checkmessage("\112\114\101\102\105\120\32\61\32\110\105\108\10\105\110\115\101\114\116\32\61\32\110\105\108\10\119\104\105\108\101\32\49\32\100\111\10\32\32\108\111\99\97\108\32\97\10\32\32\105\102\32\110\105\108\32\116\104\101\110\32\98\114\101\97\107\32\101\110\100\10\32\32\105\110\115\101\114\116\40\112\114\101\102\105\120\44\32\97\41\10\101\110\100","\103\108\111\98\97\108\32\39\105\110\115\101\114\116\39")
checkmessage("\32\32\45\45\32\116\97\105\108\32\99\97\108\108\10\32\32\114\101\116\117\114\110\32\109\97\116\104\46\115\105\110\40\34\97\34\41\10","\115\105\110")
checkmessage("\99\111\108\108\101\99\116\103\97\114\98\97\103\101\40\34\110\111\111\112\116\105\111\110\34\41","\105\110\118\97\108\105\100\32\111\112\116\105\111\110")
checkmessage("\120\32\61\32\112\114\105\110\116\32\46\46\32\34\97\34","\99\111\110\99\97\116\101\110\97\116\101")
checkmessage("\120\32\61\32\34\97\34\32\46\46\32\102\97\108\115\101","\99\111\110\99\97\116\101\110\97\116\101")
checkmessage("\120\32\61\32\123\125\32\46\46\32\50","\99\111\110\99\97\116\101\110\97\116\101")
checkmessage("\103\101\116\109\101\116\97\116\97\98\108\101\40\105\111\46\115\116\100\105\110\41\46\95\95\103\99\40\41","\110\111\32\118\97\108\117\101")
checkmessage("\108\111\99\97\108\32\86\97\114\10\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\109\97\105\110\40\41\10\32\32\78\111\83\117\99\104\78\97\109\101\32\40\102\117\110\99\116\105\111\110\40\41\32\86\97\114\61\48\32\101\110\100\41\10\101\110\100\10\109\97\105\110\40\41\10","\103\108\111\98\97\108\32\39\78\111\83\117\99\104\78\97\109\101\39")
print("\43")
aaa={}
;
setmetatable(aaa,{["\95\95\105\110\100\101\120"] = string})
checkmessage("\97\97\97\58\115\117\98\40\41","\98\97\100\32\115\101\108\102")
checkmessage("\115\116\114\105\110\103\46\115\117\98\40\39\97\39\44\32\123\125\41","\35\50")
checkmessage("\40\39\97\39\41\58\115\117\98\123\125","\35\49")
checkmessage("\116\97\98\108\101\46\115\111\114\116\40\123\49\44\50\44\51\125\44\32\116\97\98\108\101\46\115\111\114\116\41","\39\116\97\98\108\101\46\115\111\114\116\39")
checkmessage("\115\116\114\105\110\103\46\103\115\117\98\40\39\115\39\44\32\39\115\39\44\32\115\101\116\109\101\116\97\116\97\98\108\101\41","\39\115\101\116\109\101\116\97\116\97\98\108\101\39")
_G.aaa=nil
local function f
(n)
local c = coroutine.create(f)
local a,b = coroutine.resume(c)
return b
end
assert(string.find(f(),"\67\32\115\116\97\99\107\32\111\118\101\114\102\108\111\119"))
checkmessage("\99\111\114\111\117\116\105\110\101\46\121\105\101\108\100\40\41","\111\117\116\115\105\100\101\32\97\32\99\111\114\111\117\116\105\110\101")
f=coroutine.wrap(function ()
table.sort({1,2,3},coroutine.yield)
end)
checkerr("\121\105\101\108\100\32\97\99\114\111\115\115",f)
local idsize = 60 - 1
local function checksize
(source)
local _,msg = load("\120",source)
msg=string.match(msg,"\94\40\91\94\58\93\42\41\58")
assert(msg:len() <= idsize)
end
for i = 60 - 10, 60 + 10
do
checksize("\64" .. string.rep("\120",i))
checksize(string.rep("\120",i - 10))
checksize("\61" .. string.rep("\120",i))
end
local function lineerror
(s,l)
local err,msg = pcall(load(s))
local line = tonumber(string.match(msg,"\58\40\37\100\43\41\58"))
assert(line == l or (not line and not l))
end
lineerror("\108\111\99\97\108\32\97\10\32\102\111\114\32\105\61\49\44\39\97\39\32\100\111\32\10\32\112\114\105\110\116\40\105\41\32\10\32\101\110\100",2)
lineerror("\10\32\108\111\99\97\108\32\97\32\10\32\102\111\114\32\107\44\118\32\105\110\32\51\32\10\32\100\111\32\10\32\112\114\105\110\116\40\107\41\32\10\32\101\110\100",3)
lineerror("\10\10\32\102\111\114\32\107\44\118\32\105\110\32\10\32\51\32\10\32\100\111\32\10\32\112\114\105\110\116\40\107\41\32\10\32\101\110\100",4)
lineerror("\102\117\110\99\116\105\111\110\32\97\46\120\46\121\32\40\41\10\97\61\97\43\49\10\101\110\100",1)
lineerror("\97\32\61\32\10\97\10\43\10\123\125",3)
lineerror("\97\32\61\32\10\51\10\43\10\40\10\52\10\47\10\112\114\105\110\116\41",6)
lineerror("\97\32\61\32\10\112\114\105\110\116\10\43\10\40\10\52\10\47\10\55\41",3)
lineerror("\97\10\61\10\45\10\10\112\114\105\110\116\10\59",3)
lineerror("\97\10\40\32\32\32\32\32\45\45\32\60\60\10\50\51\41\10",2)
lineerror("\108\111\99\97\108\32\97\32\61\32\123\120\32\61\32\49\51\125\10\97\10\46\10\120\10\40\32\32\32\32\32\45\45\32\60\60\10\50\51\10\41\10",5)
lineerror("\108\111\99\97\108\32\97\32\61\32\123\120\32\61\32\49\51\125\10\97\10\46\10\120\10\40\10\50\51\32\43\32\97\10\41\10",6)
local p = "\32\32\102\117\110\99\116\105\111\110\32\103\40\41\32\102\40\41\32\101\110\100\10\32\32\102\117\110\99\116\105\111\110\32\102\40\120\41\32\101\114\114\111\114\40\39\97\39\44\32\88\88\41\32\101\110\100\10\103\40\41\10"
XX=3
;
lineerror((p),3)
XX=0
;
lineerror((p),false)
XX=1
;
lineerror((p),2)
XX=2
;
lineerror((p),1)
_G.XX,_G.g,_G.f=nil
lineerror("\108\111\99\97\108\32\98\32\61\32\102\97\108\115\101\10\105\102\32\110\111\116\32\98\32\116\104\101\110\10\32\32\101\114\114\111\114\32\39\116\101\115\116\39\10\101\110\100",3)
lineerror("\108\111\99\97\108\32\98\32\61\32\102\97\108\115\101\10\105\102\32\110\111\116\32\98\32\116\104\101\110\10\32\32\105\102\32\110\111\116\32\98\32\116\104\101\110\10\32\32\32\32\105\102\32\110\111\116\32\98\32\116\104\101\110\10\32\32\32\32\32\32\101\114\114\111\114\32\39\116\101\115\116\39\10\32\32\32\32\101\110\100\10\32\32\101\110\100\10\101\110\100",5)
lineerror("\32\32\108\111\99\97\108\32\97\32\61\32\48\10\32\32\108\111\99\97\108\32\98\32\61\32\49\10\32\32\108\111\99\97\108\32\99\32\61\32\98\32\37\32\97\10",3)
do
local s = string.format("\37\115\32\114\101\116\117\114\110\32\95\95\65\46\120",string.rep("\10",300))
lineerror(s,301)
end
if not _soft then
collectgarbage()
print("\116\101\115\116\105\110\103\32\115\116\97\99\107\32\111\118\101\114\102\108\111\119")
local C = 0
local l = debug.getinfo(1,"\108").currentline + 1
local function auxy
()
C=C + 1
;
auxy()
end
function YY()
collectgarbage("\115\116\111\112")
auxy()
collectgarbage("\114\101\115\116\97\114\116")
end
local function checkstackmessage
(m)
print("\40\101\120\112\101\99\116\101\100\32\115\116\97\99\107\32\111\118\101\114\102\108\111\119\32\97\102\116\101\114\32" .. C .. "\32\99\97\108\108\115\41")
C=0
return (string.find(m,"\115\116\97\99\107\32\111\118\101\114\102\108\111\119"))
end
assert(checkstackmessage(doit("\89\89\40\41")))
assert(checkstackmessage(doit("\89\89\40\41")))
assert(checkstackmessage(doit("\89\89\40\41")))
_G.YY=nil
local l1
local function g
(x)
l1=debug.getinfo(x,"\108").currentline + 2
collectgarbage("\115\116\111\112")
auxy()
collectgarbage("\114\101\115\116\97\114\116")
end
local _,stackmsg = xpcall(g,debug.traceback,1)
print("\43")
local stack = {}
for line in string.gmatch(stackmsg,"\91\94\10\93\42")
do
local curr = string.match(line,"\58\40\37\100\43\41\58")
if curr then
table.insert(stack,tonumber(curr))
end
end
local i = 1
while stack[i] ~= l1 do
assert(stack[i] == l)
i=i + 1
end
assert(i > 15)
local res,msg = xpcall(error,error)
assert(not res and type(msg) == "\115\116\114\105\110\103")
print("\43")
local function f
(x)
if x == 0 then
error("\97\10")
else
local aux = function ()
return f(x - 1)
end
local a,b = xpcall(aux,aux)
return a,b
end
end
f(3)
local function loop
(x,y,z)
return 1 + loop(x,y,z)
end
local res,msg = xpcall(loop,function (m)
assert(string.find(m,"\115\116\97\99\107\32\111\118\101\114\102\108\111\119"))
checkerr("\101\114\114\111\114\32\104\97\110\100\108\105\110\103",loop)
assert(math.sin(0) == 0)
return 15
end)
assert(msg == 15)
local f = function ()
for i = 999900, 1000000, 1
do
table.unpack({},1,i)
end
end
checkerr("\116\111\111\32\109\97\110\121\32\114\101\115\117\108\116\115",f)
end
do
local t = {}
local res,msg = pcall(function ()
error(t)
end)
assert(not res and msg == t)
res,msg=pcall(function ()
error(nil)
end)
assert(not res and msg == nil)
local function f
()
error({["\109\115\103"] = "\120"})
end
res,msg=xpcall(f,function (r)
return {["\109\115\103"] = r.msg .. "\121"}
end)
assert(msg.msg == "\120\121")
res,msg=pcall(assert,false,"\88",t)
assert(not res and msg == "\88")
res,msg=pcall(function ()
assert(false)
end)
local line = string.match(msg,"\37\119\43\37\46\108\117\97\58\40\37\100\43\41\58\32\97\115\115\101\114\116\105\111\110\32\102\97\105\108\101\100\33\36")
assert(tonumber(line) == debug.getinfo(1,"\108").currentline - 2)
res,msg=pcall(assert,false,t)
assert(not res and msg == t)
res,msg=pcall(assert,nil,nil)
assert(not res and msg == nil)
res,msg=pcall(assert)
assert(not res and string.find(msg,"\118\97\108\117\101\32\101\120\112\101\99\116\101\100"))
end
local a,b,c = xpcall(string.find,error,"\97\108\111","\97\108")
assert(a and b == 1 and c == 2)
a,b,c=xpcall(string.find,function (x)
return {}
end,true,"\97\108")
assert(not a and type(b) == "\116\97\98\108\101" and c == nil)
print("\116\101\115\116\105\110\103\32\116\111\107\101\110\115\32\105\110\32\101\114\114\111\114\32\109\101\115\115\97\103\101\115")
checksyntax("\115\121\110\116\97\120\32\101\114\114\111\114","","\101\114\114\111\114",1)
checksyntax("\49\46\48\48\48","","\49\46\48\48\48",1)
checksyntax("\91\91\97\93\93","","\91\91\97\93\93",1)
checksyntax("\39\97\97\39","","\39\97\97\39",1)
checksyntax("\119\104\105\108\101\32\60\60\32\100\111\32\101\110\100","","\60\60",1)
checksyntax("\102\111\114\32\62\62\32\100\111\32\101\110\100","","\62\62",1)
checksyntax("\97\1\97\32\61\32\49","","\60\92\49\62",1)
checksyntax("\255\97\32\61\32\49","","\60\92\50\53\53\62",1)
doit("\73\32\61\32\108\111\97\100\40\34\97\61\57\43\34\41\59\32\97\97\97\61\51")
assert(_G.aaa == 3 and not _G.I)
_G.I,_G.aaa=nil
print("\43")
local lim = 1000
if _soft then
lim=100
end
for i = 1, lim
do
doit("\97\32\61\32")
doit("\97\32\61\32\52\43\110\105\108")
end
local function testrep
(init,rep,close,repc,finalresult)
local s = init .. string.rep(rep,100) .. close .. string.rep(repc,100)
local res,msg = load(s)
assert(res)
if (finalresult) then
assert(res() == finalresult)
end
s=init .. string.rep(rep,500)
local res,msg = load(s)
assert(not res and (string.find(msg,"\116\111\111\32\109\97\110\121") or string.find(msg,"\111\118\101\114\102\108\111\119")))
end
testrep("\108\111\99\97\108\32\97\59\32\97","\44\97","\61\32\49","\44\49")
testrep("\108\111\99\97\108\32\97\59\32\97\61","\123","\48","\125")
testrep("\114\101\116\117\114\110\32","\40","\50","\41",2)
testrep("\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\97\32\40\120\41\32\114\101\116\117\114\110\32\120\32\101\110\100\59\32\114\101\116\117\114\110\32","\97\40","\50\46\50","\41",2.2)
testrep("","\100\111\32","","\32\101\110\100")
testrep("","\119\104\105\108\101\32\97\32\100\111\32","","\32\101\110\100")
testrep("\108\111\99\97\108\32\97\59\32","\105\102\32\97\32\116\104\101\110\32\101\108\115\101\32","","\32\101\110\100")
testrep("","\102\117\110\99\116\105\111\110\32\102\111\111\32\40\41\32","","\32\101\110\100")
testrep("\108\111\99\97\108\32\97\32\61\32\39\39\59\32\114\101\116\117\114\110\32","\97\46\46","\39\97\39","","\97")
testrep("\108\111\99\97\108\32\97\32\61\32\49\59\32\114\101\116\117\114\110\32","\97\94","\97","",1)
checkmessage("\97\32\61\32\102\40\120" .. string.rep("\44\120",260) .. "\41","\116\111\111\32\109\97\110\121\32\114\101\103\105\115\116\101\114\115")
local lim = 127
local s = "\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\102\111\111\65\32\40\41\10\32\32\108\111\99\97\108\32"
for j = 1, lim
do
s=s .. "\97" .. j .. "\44\32"
end
s=s .. "\98\44\99\10"
s=s .. "\108\111\99\97\108\32\102\117\110\99\116\105\111\110\32\102\111\111\66\32\40\41\10\32\32\108\111\99\97\108\32"
for j = 1, lim
do
s=s .. "\98" .. j .. "\44\32"
end
s=s .. "\98\10"
s=s .. "\102\117\110\99\116\105\111\110\32\102\111\111\67\32\40\41\32\114\101\116\117\114\110\32\98\43\99"
local c = 1 + 2
for j = 1, lim
do
s=s .. "\43\97" .. j .. "\43\98" .. j
c=c + 2
end
s=s .. "\10\101\110\100\32\32\101\110\100\32\101\110\100"
local a,b = load(s)
assert(c > 255 and string.find(b,"\116\111\111\32\109\97\110\121\32\117\112\118\97\108\117\101\115") and string.find(b,"\108\105\110\101\32\53"))
s="\10\102\117\110\99\116\105\111\110\32\102\111\111\32\40\41\10\32\32\108\111\99\97\108\32"
for j = 1, 300
do
s=s .. "\97" .. j .. "\44\32"
end
s=s .. "\98\10"
local a,b = load(s)
assert(string.find(b,"\108\105\110\101\32\50") and string.find(b,"\116\111\111\32\109\97\110\121\32\108\111\99\97\108\32\118\97\114\105\97\98\108\101\115"))
mt.__index=oldmm
print("\79\75")